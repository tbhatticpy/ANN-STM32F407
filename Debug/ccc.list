
ccc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00014c50  20000000  080044b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00034c50  2**0
                  CONTENTS
  7 .bss          00009418  20014c50  20014c50  00034c50  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2001e068  2001e068  00034c50  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00034c50  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010ce8  00000000  00000000  00034c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000203a  00000000  00000000  00045968  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000260  00000000  00000000  000479a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  00047c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000036c7  00000000  00000000  00047d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001690  00000000  00000000  0004b447  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004cad7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000008c8  00000000  00000000  0004cb54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20014c50 	.word	0x20014c50
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800442c 	.word	0x0800442c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20014c54 	.word	0x20014c54
 80001cc:	0800442c 	.word	0x0800442c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <delay_us>:
#define LCD_RW 1
#define LCD_EN 2


void delay_us(unsigned int d)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	int i = 50*d; //since d is in micro and clock frequency is known
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2232      	movs	r2, #50	; 0x32
 800027c:	fb02 f303 	mul.w	r3, r2, r3
 8000280:	60fb      	str	r3, [r7, #12]
	for(; i>0; i--)
 8000282:	e002      	b.n	800028a <delay_us+0x1a>
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3b01      	subs	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2b00      	cmp	r3, #0
 800028e:	dcf9      	bgt.n	8000284 <delay_us+0x14>
	{

	}
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <lcdCommand>:

void lcdCommand(char cmnd)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	LCD_DPRT = cmnd;
 80002a6:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <lcdCommand+0x54>)
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	6153      	str	r3, [r2, #20]
    LCD_CPRT &=~ (1<<LCD_RS);
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <lcdCommand+0x58>)
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <lcdCommand+0x58>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f023 0301 	bic.w	r3, r3, #1
 80002b6:	6153      	str	r3, [r2, #20]
    LCD_CPRT &=~(1<<LCD_RW);
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <lcdCommand+0x58>)
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <lcdCommand+0x58>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f023 0302 	bic.w	r3, r3, #2
 80002c2:	6153      	str	r3, [r2, #20]
    LCD_CPRT |= (1<<LCD_EN);
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <lcdCommand+0x58>)
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <lcdCommand+0x58>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6153      	str	r3, [r2, #20]
    delay_us(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f7ff ffcd 	bl	8000270 <delay_us>
    LCD_CPRT &= ~(1<<LCD_EN);
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <lcdCommand+0x58>)
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <lcdCommand+0x58>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f023 0304 	bic.w	r3, r3, #4
 80002e0:	6153      	str	r3, [r2, #20]
    delay_us(100);
 80002e2:	2064      	movs	r0, #100	; 0x64
 80002e4:	f7ff ffc4 	bl	8000270 <delay_us>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40020800 	.word	0x40020800
 80002f4:	40020c00 	.word	0x40020c00

080002f8 <lcdData>:
void lcdData (unsigned char data)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	LCD_DPRT = data;
 8000302:	4a12      	ldr	r2, [pc, #72]	; (800034c <lcdData+0x54>)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	6153      	str	r3, [r2, #20]
	LCD_CPRT |=(1<<LCD_RS);
 8000308:	4a11      	ldr	r2, [pc, #68]	; (8000350 <lcdData+0x58>)
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <lcdData+0x58>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6153      	str	r3, [r2, #20]
	LCD_CPRT &= ~(1<<LCD_RW);
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <lcdData+0x58>)
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <lcdData+0x58>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f023 0302 	bic.w	r3, r3, #2
 800031e:	6153      	str	r3, [r2, #20]
	LCD_CPRT |= (1<<LCD_EN);
 8000320:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <lcdData+0x58>)
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <lcdData+0x58>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6153      	str	r3, [r2, #20]
	delay_us(1);
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff9f 	bl	8000270 <delay_us>
	LCD_CPRT &= ~(1<<LCD_EN);
 8000332:	4a07      	ldr	r2, [pc, #28]	; (8000350 <lcdData+0x58>)
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <lcdData+0x58>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f023 0304 	bic.w	r3, r3, #4
 800033c:	6153      	str	r3, [r2, #20]
	delay_us(100);
 800033e:	2064      	movs	r0, #100	; 0x64
 8000340:	f7ff ff96 	bl	8000270 <delay_us>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40020800 	.word	0x40020800
 8000350:	40020c00 	.word	0x40020c00

08000354 <InitialisePortC>:
void InitialisePortC()
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

	GPIOC->MODER =0b0101010101010101;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <InitialisePortC+0x2c>)
 800035a:	f245 5255 	movw	r2, #21845	; 0x5555
 800035e:	601a      	str	r2, [r3, #0]
	GPIOC->OSPEEDR=0b1111111111111111;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <InitialisePortC+0x2c>)
 8000362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000366:	609a      	str	r2, [r3, #8]
	GPIOC->OTYPER=0;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <InitialisePortC+0x2c>)
 800036a:	2200      	movs	r2, #0
 800036c:	605a      	str	r2, [r3, #4]
	GPIOC ->PUPDR =0;
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <InitialisePortC+0x2c>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40020800 	.word	0x40020800

08000384 <InitialisePortD>:
void InitialisePortD()
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

	GPIOD->MODER =0b0101010101010101;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <InitialisePortD+0x2c>)
 800038a:	f245 5255 	movw	r2, #21845	; 0x5555
 800038e:	601a      	str	r2, [r3, #0]
	GPIOD->OSPEEDR=0b1111111111111111;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <InitialisePortD+0x2c>)
 8000392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000396:	609a      	str	r2, [r3, #8]
	GPIOD->OTYPER=0;
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <InitialisePortD+0x2c>)
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
	GPIOD ->PUPDR =0;
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <InitialisePortD+0x2c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	60da      	str	r2, [r3, #12]
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40020c00 	.word	0x40020c00

080003b4 <lcd_print>:
	lcdCommand(firstCharAdr[y-1] + x - 1);
	delay_us(100);
}

void lcd_print(char*str)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	unsigned char i = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	73fb      	strb	r3, [r7, #15]
	while(str[i] != 0)
 80003c0:	e009      	b.n	80003d6 <lcd_print+0x22>
	{
		lcdData(str[i]);
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff94 	bl	80002f8 <lcdData>
		i++;
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	3301      	adds	r3, #1
 80003d4:	73fb      	strb	r3, [r7, #15]
	while(str[i] != 0)
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1ef      	bne.n	80003c2 <lcd_print+0xe>
	}
}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <lcd_init>:


void lcd_init()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	RCC ->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80003f0:	4a15      	ldr	r2, [pc, #84]	; (8000448 <lcd_init+0x5c>)
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <lcd_init+0x5c>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
	RCC ->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80003fc:	4a12      	ldr	r2, [pc, #72]	; (8000448 <lcd_init+0x5c>)
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <lcd_init+0x5c>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
	InitialisePortC();
 8000408:	f7ff ffa4 	bl	8000354 <InitialisePortC>
	InitialisePortD();
 800040c:	f7ff ffba 	bl	8000384 <InitialisePortD>
	LCD_CPRT &=~(1<<LCD_EN);
 8000410:	4a0e      	ldr	r2, [pc, #56]	; (800044c <lcd_init+0x60>)
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <lcd_init+0x60>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f023 0304 	bic.w	r3, r3, #4
 800041a:	6153      	str	r3, [r2, #20]
	delay_us(2);
 800041c:	2002      	movs	r0, #2
 800041e:	f7ff ff27 	bl	8000270 <delay_us>
	lcdCommand(0x38);
 8000422:	2038      	movs	r0, #56	; 0x38
 8000424:	f7ff ff3a 	bl	800029c <lcdCommand>
	lcdCommand(0x0E);
 8000428:	200e      	movs	r0, #14
 800042a:	f7ff ff37 	bl	800029c <lcdCommand>
	lcdCommand(0x01);
 800042e:	2001      	movs	r0, #1
 8000430:	f7ff ff34 	bl	800029c <lcdCommand>
	delay_us(2000);
 8000434:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000438:	f7ff ff1a 	bl	8000270 <delay_us>
	lcdCommand(0x06);
 800043c:	2006      	movs	r0, #6
 800043e:	f7ff ff2d 	bl	800029c <lcdCommand>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40023800 	.word	0x40023800
 800044c:	40020c00 	.word	0x40020c00

08000450 <lcd_send_integer>:

void lcd_send_integer(int a)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	char stringConversion[10] = "          ";
 8000458:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <lcd_send_integer+0x34>)
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000460:	c303      	stmia	r3!, {r0, r1}
 8000462:	801a      	strh	r2, [r3, #0]
	sprintf(stringConversion, "%d", a);
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4907      	ldr	r1, [pc, #28]	; (8000488 <lcd_send_integer+0x38>)
 800046c:	4618      	mov	r0, r3
 800046e:	f003 fbd7 	bl	8003c20 <siprintf>

	lcd_print(stringConversion);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff9c 	bl	80003b4 <lcd_print>
}
 800047c:	bf00      	nop
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	0800444c 	.word	0x0800444c
 8000488:	08004448 	.word	0x08004448

0800048c <arm_convolve_HWC_q7_basic>:
                          const uint16_t out_shift,
                          q7_t * Im_out, 
                          const uint16_t dim_im_out, 
                          q15_t * bufferA, 
                          q7_t * bufferB)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b0ac      	sub	sp, #176	; 0xb0
 8000490:	af04      	add	r7, sp, #16
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	817b      	strh	r3, [r7, #10]
 800049a:	4613      	mov	r3, r2
 800049c:	813b      	strh	r3, [r7, #8]

    /* 
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 800049e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80004a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q7_t     *pOut = Im_out;
 80004a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80004aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80004b4:	e0cf      	b.n	8000656 <arm_convolve_HWC_q7_basic+0x1ca>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80004bc:	e0bd      	b.n	800063a <arm_convolve_HWC_q7_basic+0x1ae>
        {
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 80004be:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80004c2:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80004c6:	fb12 f303 	smulbb	r3, r2, r3
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80004d8:	e061      	b.n	800059e <arm_convolve_HWC_q7_basic+0x112>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 80004da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80004de:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80004e2:	fb12 f303 	smulbb	r3, r2, r3
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80004f4:	e03c      	b.n	8000570 <arm_convolve_HWC_q7_basic+0xe4>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 80004f6:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0d      	blt.n	800051a <arm_convolve_HWC_q7_basic+0x8e>
 80004fe:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8000502:	897b      	ldrh	r3, [r7, #10]
 8000504:	429a      	cmp	r2, r3
 8000506:	da08      	bge.n	800051a <arm_convolve_HWC_q7_basic+0x8e>
 8000508:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800050c:	2b00      	cmp	r3, #0
 800050e:	db04      	blt.n	800051a <arm_convolve_HWC_q7_basic+0x8e>
 8000510:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8000514:	897b      	ldrh	r3, [r7, #10]
 8000516:	429a      	cmp	r2, r3
 8000518:	db08      	blt.n	800052c <arm_convolve_HWC_q7_basic+0xa0>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 800051a:	893b      	ldrh	r3, [r7, #8]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	461a      	mov	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000526:	f003 fb72 	bl	8003c0e <memset>
 800052a:	e013      	b.n	8000554 <arm_convolve_HWC_q7_basic+0xc8>
                    } else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift((q7_t *)
                                               Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 800052c:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8000530:	897a      	ldrh	r2, [r7, #10]
 8000532:	fb02 f203 	mul.w	r2, r2, r3
 8000536:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800053a:	4413      	add	r3, r2
 800053c:	893a      	ldrh	r2, [r7, #8]
 800053e:	fb02 f303 	mul.w	r3, r2, r3
 8000542:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift((q7_t *)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4413      	add	r3, r2
 8000548:	893a      	ldrh	r2, [r7, #8]
 800054a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800054e:	4618      	mov	r0, r3
 8000550:	f002 ff67 	bl	8003422 <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000554:	893b      	ldrh	r3, [r7, #8]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800055c:	4413      	add	r3, r2
 800055e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000562:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8000566:	b29b      	uxth	r3, r3
 8000568:	3301      	adds	r3, #1
 800056a:	b29b      	uxth	r3, r3
 800056c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8000570:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8000574:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8000578:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 800057c:	fb01 f103 	mul.w	r1, r1, r3
 8000580:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8000584:	1ac9      	subs	r1, r1, r3
 8000586:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800058a:	440b      	add	r3, r1
 800058c:	429a      	cmp	r2, r3
 800058e:	dbb2      	blt.n	80004f6 <arm_convolve_HWC_q7_basic+0x6a>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000590:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8000594:	b29b      	uxth	r3, r3
 8000596:	3301      	adds	r3, #1
 8000598:	b29b      	uxth	r3, r3
 800059a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800059e:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 80005a2:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 80005a6:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80005aa:	fb01 f103 	mul.w	r1, r1, r3
 80005ae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80005b2:	1ac9      	subs	r1, r1, r3
 80005b4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80005b8:	440b      	add	r3, r1
 80005ba:	429a      	cmp	r2, r3
 80005bc:	db8d      	blt.n	80004da <arm_convolve_HWC_q7_basic+0x4e>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80005be:	893b      	ldrh	r3, [r7, #8]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80005ce:	fb02 f303 	mul.w	r3, r2, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80005d8:	441a      	add	r2, r3
 80005da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005de:	429a      	cmp	r2, r3
 80005e0:	d124      	bne.n	800062c <arm_convolve_HWC_q7_basic+0x1a0>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 80005e2:	893a      	ldrh	r2, [r7, #8]
 80005e4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80005e8:	fb12 f303 	smulbb	r3, r2, r3
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80005f2:	fb12 f303 	smulbb	r3, r2, r3
 80005f6:	b299      	uxth	r1, r3
                pOut =
 80005f8:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80005fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000600:	9303      	str	r3, [sp, #12]
 8000602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	460b      	mov	r3, r1
 8000616:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f001 fac9 	bl	8001bb2 <arm_nn_mat_mult_kernel_q7_q15>
 8000620:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                  ch_im_out,
                                                  ch_im_in *
                                                  dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8000624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 800062c:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8000630:	b29b      	uxth	r3, r3
 8000632:	3301      	adds	r3, #1
 8000634:	b29b      	uxth	r3, r3
 8000636:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800063a:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 800063e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000642:	429a      	cmp	r2, r3
 8000644:	f6ff af3b 	blt.w	80004be <arm_convolve_HWC_q7_basic+0x32>
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8000648:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 800064c:	b29b      	uxth	r3, r3
 800064e:	3301      	adds	r3, #1
 8000650:	b29b      	uxth	r3, r3
 8000652:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8000656:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 800065a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800065e:	429a      	cmp	r2, r3
 8000660:	f6ff af29 	blt.w	80004b6 <arm_convolve_HWC_q7_basic+0x2a>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8000664:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800066c:	429a      	cmp	r2, r3
 800066e:	f000 80f9 	beq.w	8000864 <arm_convolve_HWC_q7_basic+0x3d8>
    {
        const q7_t *pA = wt;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800067e:	e0ea      	b.n	8000856 <arm_convolve_HWC_q7_basic+0x3ca>
        {
            /* Load the accumulator with bias first */
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8000680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000684:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000688:	4413      	add	r3, r2
 800068a:	f993 3000 	ldrsb.w	r3, [r3]
 800068e:	461a      	mov	r2, r3
 8000690:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000694:	409a      	lsls	r2, r3
 8000696:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800069a:	3b01      	subs	r3, #1
 800069c:	2101      	movs	r1, #1
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	4413      	add	r3, r2
 80006a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Point to the beging of the im2col buffer */
            q15_t    *pB = bufferA;
 80006a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80006ac:	61fb      	str	r3, [r7, #28]

            /* Each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 80006ae:	893b      	ldrh	r3, [r7, #8]
 80006b0:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80006bc:	fb02 f303 	mul.w	r3, r2, r3
 80006c0:	109b      	asrs	r3, r3, #2
 80006c2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            while (colCnt)
 80006c6:	e078      	b.n	80007ba <arm_convolve_HWC_q7_basic+0x32e>
 80006c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
 * @brief read and expand one Q7 word into two Q15 words
 */

__STATIC_FORCEINLINE void *read_and_pad(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 80006da:	f107 0210 	add.w	r2, r7, #16
 80006de:	6813      	ldr	r3, [r2, #0]
 80006e0:	1d19      	adds	r1, r3, #4
 80006e2:	6011      	str	r1, [r2, #0]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80006e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006ec:	2308      	movs	r3, #8
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 80006f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 80006f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <arm_convolve_HWC_q7_basic+0x276>
  {
    return op1;
 80006fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000700:	e003      	b.n	800070a <arm_convolve_HWC_q7_basic+0x27e>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8000702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000706:	fa62 f303 	ror.w	r3, r2, r3
 800070a:	637b      	str	r3, [r7, #52]	; 0x34

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800070c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800070e:	fa2f f383 	sxtb16	r3, r3
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8000714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
        q31_t     inAbuf2 = __SXTB16(inA);
 8000718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	fa2f f383 	sxtb16	r3, r3
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8000724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000726:	623b      	str	r3, [r7, #32]

#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8000728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072a:	0c1b      	lsrs	r3, r3, #16
 800072c:	041b      	lsls	r3, r3, #16
 800072e:	6a3a      	ldr	r2, [r7, #32]
 8000730:	0c12      	lsrs	r2, r2, #16
 8000732:	4313      	orrs	r3, r2
 8000734:	461a      	mov	r2, r3
 8000736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000738:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	b29a      	uxth	r2, r3
 800073e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000740:	041b      	lsls	r3, r3, #16
 8000742:	4313      	orrs	r3, r2
 8000744:	461a      	mov	r2, r3
 8000746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000748:	601a      	str	r2, [r3, #0]
#else
        *out1 = __PKHTB(inAbuf1, inAbuf2, 16);
        *out2 = __PKHBT(inAbuf2, inAbuf1, 16);
#endif

        return source;
 800074a:	693b      	ldr	r3, [r7, #16]
            {
                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 800074c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                inB1 = *__SIMD32(pB)++;
 8000750:	f107 021c 	add.w	r2, r7, #28
 8000754:	6813      	ldr	r3, [r2, #0]
 8000756:	1d19      	adds	r1, r3, #4
 8000758:	6011      	str	r1, [r2, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	67fb      	str	r3, [r7, #124]	; 0x7c
                sum = __SMLAD(inA1, inB1, sum);
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	4619      	mov	r1, r3
 8000762:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000768:	65b9      	str	r1, [r7, #88]	; 0x58
 800076a:	657a      	str	r2, [r7, #84]	; 0x54
 800076c:	653b      	str	r3, [r7, #80]	; 0x50

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800076e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000774:	fb23 1302 	smlad	r3, r3, r2, r1
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800077a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800077c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                inB2 = *__SIMD32(pB)++;
 8000780:	f107 021c 	add.w	r2, r7, #28
 8000784:	6813      	ldr	r3, [r2, #0]
 8000786:	1d19      	adds	r1, r3, #4
 8000788:	6011      	str	r1, [r2, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	67bb      	str	r3, [r7, #120]	; 0x78
                sum = __SMLAD(inA2, inB2, sum);
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	4619      	mov	r1, r3
 8000792:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000798:	66b9      	str	r1, [r7, #104]	; 0x68
 800079a:	667a      	str	r2, [r7, #100]	; 0x64
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800079e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80007a4:	fb23 1302 	smlad	r3, r3, r2, r1
 80007a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80007aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                colCnt--;
 80007b0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80007b4:	3b01      	subs	r3, #1
 80007b6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 80007ba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d182      	bne.n	80006c8 <arm_convolve_HWC_q7_basic+0x23c>
            }
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 80007c2:	893a      	ldrh	r2, [r7, #8]
 80007c4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80007c8:	fb12 f303 	smulbb	r3, r2, r3
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80007d2:	fb12 f303 	smulbb	r3, r2, r3
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	f003 0303 	and.w	r3, r3, #3
 80007dc:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 80007e0:	e01d      	b.n	800081e <arm_convolve_HWC_q7_basic+0x392>
            {
                q7_t      inA1 = *pA++;
 80007e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                q15_t     inB1 = *pB++;
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	1c9a      	adds	r2, r3, #2
 80007f6:	61fa      	str	r2, [r7, #28]
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                sum += inA1 * inB1;
 80007fe:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8000802:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800080e:	4413      	add	r3, r2
 8000810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                colCnt--;
 8000814:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000818:	3b01      	subs	r3, #1
 800081a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 800081e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1dd      	bne.n	80007e2 <arm_convolve_HWC_q7_basic+0x356>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8000826:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000830:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8000834:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000838:	fa41 f202 	asr.w	r2, r1, r2
 800083c:	673a      	str	r2, [r7, #112]	; 0x70
 800083e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000840:	f302 0207 	ssat	r2, #8, r2
 8000844:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000846:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000848:	b252      	sxtb	r2, r2
 800084a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 800084c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000850:	3301      	adds	r3, #1
 8000852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000856:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800085a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800085e:	429a      	cmp	r2, r3
 8000860:	f73f af0e 	bgt.w	8000680 <arm_convolve_HWC_q7_basic+0x1f4>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	37a0      	adds	r7, #160	; 0xa0
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <arm_convolve_HWC_q7_fast>:
                         const uint16_t out_shift,
                         q7_t * Im_out, 
                         const uint16_t dim_im_out, 
                         q15_t * bufferA, 
                         q7_t * bufferB)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b0aa      	sub	sp, #168	; 0xa8
 8000872:	af04      	add	r7, sp, #16
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	817b      	strh	r3, [r7, #10]
 800087c:	4613      	mov	r3, r2
 800087e:	813b      	strh	r3, [r7, #8]
    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 8000880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8000888:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800088c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 8000890:	893b      	ldrh	r3, [r7, #8]
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	b29b      	uxth	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d106      	bne.n	80008aa <arm_convolve_HWC_q7_fast+0x3c>
 800089c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <arm_convolve_HWC_q7_fast+0x44>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 80008aa:	f06f 0302 	mvn.w	r3, #2
 80008ae:	f000 bcc8 	b.w	8001242 <arm_convolve_HWC_q7_fast+0x9d4>
     * Middle: i_out_y from padding to dim_im_out-padding-1
     * Bottom: i_out_y from dim_im_out-padding to dim_im_out-1
     */

    /* top part */
    for (i_out_y = 0; i_out_y < padding; i_out_y++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80008b8:	e0cf      	b.n	8000a5a <arm_convolve_HWC_q7_fast+0x1ec>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80008c0:	e0bd      	b.n	8000a3e <arm_convolve_HWC_q7_fast+0x1d0>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 80008c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80008c6:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80008ca:	fb12 f303 	smulbb	r3, r2, r3
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80008dc:	e061      	b.n	80009a2 <arm_convolve_HWC_q7_fast+0x134>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 80008de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80008e2:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80008e6:	fb12 f303 	smulbb	r3, r2, r3
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80008f8:	e03c      	b.n	8000974 <arm_convolve_HWC_q7_fast+0x106>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 80008fa:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0d      	blt.n	800091e <arm_convolve_HWC_q7_fast+0xb0>
 8000902:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000906:	897b      	ldrh	r3, [r7, #10]
 8000908:	429a      	cmp	r2, r3
 800090a:	da08      	bge.n	800091e <arm_convolve_HWC_q7_fast+0xb0>
 800090c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000910:	2b00      	cmp	r3, #0
 8000912:	db04      	blt.n	800091e <arm_convolve_HWC_q7_fast+0xb0>
 8000914:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000918:	897b      	ldrh	r3, [r7, #10]
 800091a:	429a      	cmp	r2, r3
 800091c:	db08      	blt.n	8000930 <arm_convolve_HWC_q7_fast+0xc2>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 800091e:	893b      	ldrh	r3, [r7, #8]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	461a      	mov	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800092a:	f003 f970 	bl	8003c0e <memset>
 800092e:	e013      	b.n	8000958 <arm_convolve_HWC_q7_fast+0xea>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8000930:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000934:	897a      	ldrh	r2, [r7, #10]
 8000936:	fb02 f203 	mul.w	r2, r2, r3
 800093a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800093e:	4413      	add	r3, r2
 8000940:	893a      	ldrh	r2, [r7, #8]
 8000942:	fb02 f303 	mul.w	r3, r2, r3
 8000946:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	893a      	ldrh	r2, [r7, #8]
 800094e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fdd4 	bl	8003500 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000958:	893b      	ldrh	r3, [r7, #8]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000960:	4413      	add	r3, r2
 8000962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000966:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800096a:	b29b      	uxth	r3, r3
 800096c:	3301      	adds	r3, #1
 800096e:	b29b      	uxth	r3, r3
 8000970:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000974:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000978:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800097c:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000980:	fb01 f103 	mul.w	r1, r1, r3
 8000984:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000988:	1ac9      	subs	r1, r1, r3
 800098a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800098e:	440b      	add	r3, r1
 8000990:	429a      	cmp	r2, r3
 8000992:	dbb2      	blt.n	80008fa <arm_convolve_HWC_q7_fast+0x8c>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000994:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000998:	b29b      	uxth	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b29b      	uxth	r3, r3
 800099e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80009a2:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80009a6:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80009aa:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 80009ae:	fb01 f103 	mul.w	r1, r1, r3
 80009b2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80009bc:	440b      	add	r3, r1
 80009be:	429a      	cmp	r2, r3
 80009c0:	db8d      	blt.n	80008de <arm_convolve_HWC_q7_fast+0x70>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80009c2:	893b      	ldrh	r3, [r7, #8]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80009d2:	fb02 f303 	mul.w	r3, r2, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80009dc:	441a      	add	r2, r3
 80009de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d124      	bne.n	8000a30 <arm_convolve_HWC_q7_fast+0x1c2>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 80009e6:	893a      	ldrh	r2, [r7, #8]
 80009e8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80009ec:	fb12 f303 	smulbb	r3, r2, r3
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80009f6:	fb12 f303 	smulbb	r3, r2, r3
 80009fa:	b299      	uxth	r1, r3
                pOut =
 80009fc:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a04:	9303      	str	r3, [sp, #12]
 8000a06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a0a:	9302      	str	r3, [sp, #8]
 8000a0c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f001 fe34 	bl	800268c <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000a24:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000a30:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000a3e:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000a42:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8000a46:	429a      	cmp	r2, r3
 8000a48:	f6ff af3b 	blt.w	80008c2 <arm_convolve_HWC_q7_fast+0x54>
    for (i_out_y = 0; i_out_y < padding; i_out_y++)
 8000a4c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8000a5a:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8000a5e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000a62:	429a      	cmp	r2, r3
 8000a64:	f6ff af29 	blt.w	80008ba <arm_convolve_HWC_q7_fast+0x4c>
            }
        }
    }

    /* middle part, here we also divide the x into left, mid and right */
    for (; i_out_y < dim_im_out - padding; i_out_y++)
 8000a68:	e21b      	b.n	8000ea2 <arm_convolve_HWC_q7_fast+0x634>
    {

        /* left part */
        for (i_out_x = 0; i_out_x < padding; i_out_x++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000a70:	e0b4      	b.n	8000bdc <arm_convolve_HWC_q7_fast+0x36e>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000a72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000a76:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000a7a:	fb12 f303 	smulbb	r3, r2, r3
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000a8c:	e058      	b.n	8000b40 <arm_convolve_HWC_q7_fast+0x2d2>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000a8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000a92:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000a96:	fb12 f303 	smulbb	r3, r2, r3
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000aa8:	e033      	b.n	8000b12 <arm_convolve_HWC_q7_fast+0x2a4>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000aaa:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db04      	blt.n	8000abc <arm_convolve_HWC_q7_fast+0x24e>
 8000ab2:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000ab6:	897b      	ldrh	r3, [r7, #10]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	db08      	blt.n	8000ace <arm_convolve_HWC_q7_fast+0x260>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8000abc:	893b      	ldrh	r3, [r7, #8]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000ac8:	f003 f8a1 	bl	8003c0e <memset>
 8000acc:	e013      	b.n	8000af6 <arm_convolve_HWC_q7_fast+0x288>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8000ace:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000ad2:	897a      	ldrh	r2, [r7, #10]
 8000ad4:	fb02 f203 	mul.w	r2, r2, r3
 8000ad8:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000adc:	4413      	add	r3, r2
 8000ade:	893a      	ldrh	r2, [r7, #8]
 8000ae0:	fb02 f303 	mul.w	r3, r2, r3
 8000ae4:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	893a      	ldrh	r2, [r7, #8]
 8000aec:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fd05 	bl	8003500 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000af6:	893b      	ldrh	r3, [r7, #8]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000afe:	4413      	add	r3, r2
 8000b00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000b04:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000b12:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000b16:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000b1a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000b1e:	fb01 f103 	mul.w	r1, r1, r3
 8000b22:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000b2c:	440b      	add	r3, r1
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbbb      	blt.n	8000aaa <arm_convolve_HWC_q7_fast+0x23c>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000b32:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3301      	adds	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000b40:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000b44:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000b48:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000b4c:	fb01 f103 	mul.w	r1, r1, r3
 8000b50:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000b54:	1ac9      	subs	r1, r1, r3
 8000b56:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000b5a:	440b      	add	r3, r1
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	db96      	blt.n	8000a8e <arm_convolve_HWC_q7_fast+0x220>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000b60:	893b      	ldrh	r3, [r7, #8]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
 8000b6c:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000b7a:	441a      	add	r2, r3
 8000b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d124      	bne.n	8000bce <arm_convolve_HWC_q7_fast+0x360>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000b84:	893a      	ldrh	r2, [r7, #8]
 8000b86:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000b8a:	fb12 f303 	smulbb	r3, r2, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000b94:	fb12 f303 	smulbb	r3, r2, r3
 8000b98:	b299      	uxth	r1, r3
                pOut =
 8000b9a:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ba2:	9303      	str	r3, [sp, #12]
 8000ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f001 fd65 	bl	800268c <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000bc2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < padding; i_out_x++)
 8000bce:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000bdc:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000be0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f6ff af44 	blt.w	8000a72 <arm_convolve_HWC_q7_fast+0x204>
            }
        }

        /* mid part */
        for (; i_out_x < dim_im_out - padding; i_out_x++)
 8000bea:	e08c      	b.n	8000d06 <arm_convolve_HWC_q7_fast+0x498>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000bec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000bf0:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000bf4:	fb12 f303 	smulbb	r3, r2, r3
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000c06:	e030      	b.n	8000c6a <arm_convolve_HWC_q7_fast+0x3fc>
            {
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
                                                 +
                                                 (i_ker_y *
 8000c08:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000c0c:	897a      	ldrh	r2, [r7, #10]
 8000c0e:	fb02 f203 	mul.w	r2, r2, r3
                                                  dim_im_in +
                                                  i_out_x *
 8000c12:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000c16:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000c1a:	fb01 f303 	mul.w	r3, r1, r3
                                                  dim_im_in +
 8000c1e:	441a      	add	r2, r3
                                                  stride - padding) * ch_im_in, pBuffer, ch_im_in * dim_kernel);
 8000c20:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	893a      	ldrh	r2, [r7, #8]
 8000c28:	fb02 f303 	mul.w	r3, r2, r3
 8000c2c:	461a      	mov	r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1898      	adds	r0, r3, r2
                                                  stride - padding) * ch_im_in, pBuffer, ch_im_in * dim_kernel);
 8000c32:	893b      	ldrh	r3, [r7, #8]
 8000c34:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000c42:	f002 fc5d 	bl	8003500 <arm_q7_to_q15_reordered_no_shift>
                pBuffer += ch_im_in * dim_kernel;
 8000c46:	893b      	ldrh	r3, [r7, #8]
 8000c48:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000c56:	4413      	add	r3, r2
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000c5c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000c6a:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000c6e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000c72:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000c76:	fb01 f103 	mul.w	r1, r1, r3
 8000c7a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c7e:	1ac9      	subs	r1, r1, r3
 8000c80:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000c84:	440b      	add	r3, r1
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dbbe      	blt.n	8000c08 <arm_convolve_HWC_q7_fast+0x39a>
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000c8a:	893b      	ldrh	r3, [r7, #8]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ca4:	441a      	add	r2, r3
 8000ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d124      	bne.n	8000cf8 <arm_convolve_HWC_q7_fast+0x48a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000cae:	893a      	ldrh	r2, [r7, #8]
 8000cb0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000cb4:	fb12 f303 	smulbb	r3, r2, r3
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000cbe:	fb12 f303 	smulbb	r3, r2, r3
 8000cc2:	b299      	uxth	r1, r3
                pOut =
 8000cc4:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ccc:	9303      	str	r3, [sp, #12]
 8000cce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f001 fcd0 	bl	800268c <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000cec:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out - padding; i_out_x++)
 8000cf8:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000d06:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000d0a:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8000d0e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f6ff af69 	blt.w	8000bec <arm_convolve_HWC_q7_fast+0x37e>
            }
        }

        /* right part */
        for (; i_out_x < dim_im_out; i_out_x++)
 8000d1a:	e0b4      	b.n	8000e86 <arm_convolve_HWC_q7_fast+0x618>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000d1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000d20:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000d24:	fb12 f303 	smulbb	r3, r2, r3
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000d36:	e058      	b.n	8000dea <arm_convolve_HWC_q7_fast+0x57c>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000d38:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000d3c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000d40:	fb12 f303 	smulbb	r3, r2, r3
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000d52:	e033      	b.n	8000dbc <arm_convolve_HWC_q7_fast+0x54e>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000d54:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db04      	blt.n	8000d66 <arm_convolve_HWC_q7_fast+0x4f8>
 8000d5c:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000d60:	897b      	ldrh	r3, [r7, #10]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	db08      	blt.n	8000d78 <arm_convolve_HWC_q7_fast+0x50a>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8000d66:	893b      	ldrh	r3, [r7, #8]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d72:	f002 ff4c 	bl	8003c0e <memset>
 8000d76:	e013      	b.n	8000da0 <arm_convolve_HWC_q7_fast+0x532>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8000d78:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000d7c:	897a      	ldrh	r2, [r7, #10]
 8000d7e:	fb02 f203 	mul.w	r2, r2, r3
 8000d82:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000d86:	4413      	add	r3, r2
 8000d88:	893a      	ldrh	r2, [r7, #8]
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	893a      	ldrh	r2, [r7, #8]
 8000d96:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fbb0 	bl	8003500 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000da0:	893b      	ldrh	r3, [r7, #8]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000da8:	4413      	add	r3, r2
 8000daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000dae:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	3301      	adds	r3, #1
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000dbc:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000dc0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000dc4:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000dc8:	fb01 f103 	mul.w	r1, r1, r3
 8000dcc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000dd0:	1ac9      	subs	r1, r1, r3
 8000dd2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000dd6:	440b      	add	r3, r1
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbbb      	blt.n	8000d54 <arm_convolve_HWC_q7_fast+0x4e6>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000ddc:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000dea:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000dee:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000df2:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000df6:	fb01 f103 	mul.w	r1, r1, r3
 8000dfa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000dfe:	1ac9      	subs	r1, r1, r3
 8000e00:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e04:	440b      	add	r3, r1
 8000e06:	429a      	cmp	r2, r3
 8000e08:	db96      	blt.n	8000d38 <arm_convolve_HWC_q7_fast+0x4ca>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000e0a:	893b      	ldrh	r3, [r7, #8]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e12:	fb02 f303 	mul.w	r3, r2, r3
 8000e16:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e24:	441a      	add	r2, r3
 8000e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d124      	bne.n	8000e78 <arm_convolve_HWC_q7_fast+0x60a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000e2e:	893a      	ldrh	r2, [r7, #8]
 8000e30:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e34:	fb12 f303 	smulbb	r3, r2, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e3e:	fb12 f303 	smulbb	r3, r2, r3
 8000e42:	b299      	uxth	r1, r3
                pOut =
 8000e44:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e4c:	9303      	str	r3, [sp, #12]
 8000e4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	460b      	mov	r3, r1
 8000e62:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f001 fc10 	bl	800268c <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000e6c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out; i_out_x++)
 8000e78:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000e86:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000e8a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	f6ff af44 	blt.w	8000d1c <arm_convolve_HWC_q7_fast+0x4ae>
    for (; i_out_y < dim_im_out - padding; i_out_y++)
 8000e94:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8000ea2:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8000ea6:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8000eaa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f6ff adda 	blt.w	8000a6a <arm_convolve_HWC_q7_fast+0x1fc>
            }
        }
    }

    for (; i_out_y < dim_im_out; i_out_y++)
 8000eb6:	e0cf      	b.n	8001058 <arm_convolve_HWC_q7_fast+0x7ea>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000ebe:	e0bd      	b.n	800103c <arm_convolve_HWC_q7_fast+0x7ce>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000ec0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000ec4:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000ec8:	fb12 f303 	smulbb	r3, r2, r3
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000eda:	e061      	b.n	8000fa0 <arm_convolve_HWC_q7_fast+0x732>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000edc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000ee0:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000ee4:	fb12 f303 	smulbb	r3, r2, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000ef6:	e03c      	b.n	8000f72 <arm_convolve_HWC_q7_fast+0x704>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000ef8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0d      	blt.n	8000f1c <arm_convolve_HWC_q7_fast+0x6ae>
 8000f00:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000f04:	897b      	ldrh	r3, [r7, #10]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	da08      	bge.n	8000f1c <arm_convolve_HWC_q7_fast+0x6ae>
 8000f0a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db04      	blt.n	8000f1c <arm_convolve_HWC_q7_fast+0x6ae>
 8000f12:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000f16:	897b      	ldrh	r3, [r7, #10]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	db08      	blt.n	8000f2e <arm_convolve_HWC_q7_fast+0x6c0>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8000f1c:	893b      	ldrh	r3, [r7, #8]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	461a      	mov	r2, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f28:	f002 fe71 	bl	8003c0e <memset>
 8000f2c:	e013      	b.n	8000f56 <arm_convolve_HWC_q7_fast+0x6e8>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8000f2e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000f32:	897a      	ldrh	r2, [r7, #10]
 8000f34:	fb02 f203 	mul.w	r2, r2, r3
 8000f38:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000f3c:	4413      	add	r3, r2
 8000f3e:	893a      	ldrh	r2, [r7, #8]
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4413      	add	r3, r2
 8000f4a:	893a      	ldrh	r2, [r7, #8]
 8000f4c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fad5 	bl	8003500 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000f56:	893b      	ldrh	r3, [r7, #8]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f5e:	4413      	add	r3, r2
 8000f60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000f64:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000f72:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000f76:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000f7a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000f7e:	fb01 f103 	mul.w	r1, r1, r3
 8000f82:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000f8c:	440b      	add	r3, r1
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dbb2      	blt.n	8000ef8 <arm_convolve_HWC_q7_fast+0x68a>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000f92:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000fa0:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000fa4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000fa8:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000fac:	fb01 f103 	mul.w	r1, r1, r3
 8000fb0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000fb4:	1ac9      	subs	r1, r1, r3
 8000fb6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000fba:	440b      	add	r3, r1
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	db8d      	blt.n	8000edc <arm_convolve_HWC_q7_fast+0x66e>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000fc0:	893b      	ldrh	r3, [r7, #8]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000fda:	441a      	add	r2, r3
 8000fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d124      	bne.n	800102e <arm_convolve_HWC_q7_fast+0x7c0>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000fe4:	893a      	ldrh	r2, [r7, #8]
 8000fe6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000fea:	fb12 f303 	smulbb	r3, r2, r3
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000ff4:	fb12 f303 	smulbb	r3, r2, r3
 8000ff8:	b299      	uxth	r1, r3
                pOut =
 8000ffa:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001002:	9303      	str	r3, [sp, #12]
 8001004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	460b      	mov	r3, r1
 8001018:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f001 fb35 	bl	800268c <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001022:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8001026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800102a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 800102e:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001032:	b29b      	uxth	r3, r3
 8001034:	3301      	adds	r3, #1
 8001036:	b29b      	uxth	r3, r3
 8001038:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800103c:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8001040:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001044:	429a      	cmp	r2, r3
 8001046:	f6ff af3b 	blt.w	8000ec0 <arm_convolve_HWC_q7_fast+0x652>
    for (; i_out_y < dim_im_out; i_out_y++)
 800104a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800104e:	b29b      	uxth	r3, r3
 8001050:	3301      	adds	r3, #1
 8001052:	b29b      	uxth	r3, r3
 8001054:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001058:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 800105c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001060:	429a      	cmp	r2, r3
 8001062:	f6ff af29 	blt.w	8000eb8 <arm_convolve_HWC_q7_fast+0x64a>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8001066:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800106a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800106e:	429a      	cmp	r2, r3
 8001070:	f000 80e6 	beq.w	8001240 <arm_convolve_HWC_q7_fast+0x9d2>
    {
        const q7_t *pA = wt;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        int       i;

        for (i = 0; i < ch_im_out; i++)
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001080:	e0d7      	b.n	8001232 <arm_convolve_HWC_q7_fast+0x9c4>
        {
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8001082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800108a:	4413      	add	r3, r2
 800108c:	f993 3000 	ldrsb.w	r3, [r3]
 8001090:	461a      	mov	r2, r3
 8001092:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001096:	409a      	lsls	r2, r3
 8001098:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800109c:	3b01      	subs	r3, #1
 800109e:	2101      	movs	r1, #1
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	67fb      	str	r3, [r7, #124]	; 0x7c
            q15_t    *pB = bufferA;
 80010a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010ac:	61fb      	str	r3, [r7, #28]
            /* each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 80010ae:	893b      	ldrh	r3, [r7, #8]
 80010b0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	109b      	asrs	r3, r3, #2
 80010c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

            while (colCnt)
 80010c6:	e067      	b.n	8001198 <arm_convolve_HWC_q7_fast+0x92a>
 80010c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 80010da:	f107 0210 	add.w	r2, r7, #16
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	1d19      	adds	r1, r3, #4
 80010e2:	6011      	str	r1, [r2, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 80010e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
 80010ec:	2308      	movs	r3, #8
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 80010f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 80010f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <arm_convolve_HWC_q7_fast+0x894>
    return op1;
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	e003      	b.n	800110a <arm_convolve_HWC_q7_fast+0x89c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8001102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001106:	fa62 f303 	ror.w	r3, r2, r3
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	fa2f f383 	sxtb16	r3, r3
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001116:	461a      	mov	r2, r3
 8001118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800111a:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 800111c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	fa2f f383 	sxtb16	r3, r3
 8001126:	623b      	str	r3, [r7, #32]
  return(result);
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	461a      	mov	r2, r3
 800112c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800112e:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 8001130:	693b      	ldr	r3, [r7, #16]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA1, &inA2);
 8001132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 8001136:	f107 021c 	add.w	r2, r7, #28
 800113a:	6813      	ldr	r3, [r2, #0]
 800113c:	1d19      	adds	r1, r3, #4
 800113e:	6011      	str	r1, [r2, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	677b      	str	r3, [r7, #116]	; 0x74
                sum = __SMLAD(inA1, inB1, sum);
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	4619      	mov	r1, r3
 8001148:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800114a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114c:	6539      	str	r1, [r7, #80]	; 0x50
 800114e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001150:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001156:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001158:	fb23 1302 	smlad	r3, r3, r2, r1
 800115c:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800115e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001160:	67fb      	str	r3, [r7, #124]	; 0x7c
                inB2 = *__SIMD32(pB)++;
 8001162:	f107 021c 	add.w	r2, r7, #28
 8001166:	6813      	ldr	r3, [r2, #0]
 8001168:	1d19      	adds	r1, r3, #4
 800116a:	6011      	str	r1, [r2, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA2, inB2, sum);
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	4619      	mov	r1, r3
 8001174:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001178:	6639      	str	r1, [r7, #96]	; 0x60
 800117a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800117c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800117e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001182:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001184:	fb23 1302 	smlad	r3, r3, r2, r1
 8001188:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800118a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800118c:	67fb      	str	r3, [r7, #124]	; 0x7c

                colCnt--;
 800118e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001192:	3b01      	subs	r3, #1
 8001194:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8001198:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800119c:	2b00      	cmp	r3, #0
 800119e:	d193      	bne.n	80010c8 <arm_convolve_HWC_q7_fast+0x85a>
            }
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 80011a0:	893a      	ldrh	r2, [r7, #8]
 80011a2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80011a6:	fb12 f303 	smulbb	r3, r2, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80011b0:	fb12 f303 	smulbb	r3, r2, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 80011be:	e01b      	b.n	80011f8 <arm_convolve_HWC_q7_fast+0x98a>
            {
                q7_t      inA1 = *pA++;
 80011c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                q15_t     inB1 = *pB++;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	1c9a      	adds	r2, r3, #2
 80011d4:	61fa      	str	r2, [r7, #28]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                sum += inA1 * inB1;
 80011dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011e0:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80011ea:	4413      	add	r3, r2
 80011ec:	67fb      	str	r3, [r7, #124]	; 0x7c
                colCnt--;
 80011ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 80011f8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1df      	bne.n	80011c0 <arm_convolve_HWC_q7_fast+0x952>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 8001200:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001204:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001206:	fa42 f303 	asr.w	r3, r2, r3
 800120a:	66bb      	str	r3, [r7, #104]	; 0x68
 800120c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800120e:	f303 0307 	ssat	r3, #8, r3
 8001212:	667b      	str	r3, [r7, #100]	; 0x64
 8001214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001216:	b25a      	sxtb	r2, r3
 8001218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800121c:	701a      	strb	r2, [r3, #0]
            pOut++;
 800121e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001222:	3301      	adds	r3, #1
 8001224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i = 0; i < ch_im_out; i++)
 8001228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800122c:	3301      	adds	r3, #1
 800122e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001232:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8001236:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800123a:	429a      	cmp	r2, r3
 800123c:	f73f af21 	bgt.w	8001082 <arm_convolve_HWC_q7_fast+0x814>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3798      	adds	r7, #152	; 0x98
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <arm_fully_connected_q7_opt>:
                           const uint16_t bias_shift,
                           const uint16_t out_shift, 
                           const q7_t * bias, 
                           q7_t * pOut, 
                           q15_t * vec_buffer)
{
 800124a:	b590      	push	{r4, r7, lr}
 800124c:	b0f1      	sub	sp, #452	; 0x1c4
 800124e:	af00      	add	r7, sp, #0
 8001250:	f107 040c 	add.w	r4, r7, #12
 8001254:	6020      	str	r0, [r4, #0]
 8001256:	f107 0008 	add.w	r0, r7, #8
 800125a:	6001      	str	r1, [r0, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	1dbb      	adds	r3, r7, #6
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	460a      	mov	r2, r1
 8001266:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	f107 0208 	add.w	r2, r7, #8
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	601a      	str	r2, [r3, #0]
    q7_t     *pO = pOut;
 8001274:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001278:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const q7_t *pBias = bias;
 800127c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001280:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 2;
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6

    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 800128e:	1dbb      	adds	r3, r7, #6
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	f002 f930 	bl	8003500 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 80012a0:	e339      	b.n	8001916 <arm_fully_connected_q7_opt+0x6cc>
    {

        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80012a2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012ac:	f993 3000 	ldrsb.w	r3, [r3]
 80012b0:	461a      	mov	r2, r3
 80012b2:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80012b6:	409a      	lsls	r2, r3
 80012b8:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80012bc:	3b01      	subs	r3, #1
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80012ca:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012d4:	f993 3000 	ldrsb.w	r3, [r3]
 80012d8:	461a      	mov	r2, r3
 80012da:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80012de:	409a      	lsls	r2, r3
 80012e0:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80012e4:	3b01      	subs	r3, #1
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80012f2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001300:	461a      	mov	r2, r3
 8001302:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8001306:	409a      	lsls	r2, r3
 8001308:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 800130c:	3b01      	subs	r3, #1
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	4413      	add	r3, r2
 8001316:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800131a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001324:	f993 3000 	ldrsb.w	r3, [r3]
 8001328:	461a      	mov	r2, r3
 800132a:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 800132e:	409a      	lsls	r2, r3
 8001330:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8001334:	3b01      	subs	r3, #1
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	4413      	add	r3, r2
 800133e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

        uint16_t  colCnt = dim_vec >> 2;
 8001342:	1dbb      	adds	r3, r7, #6
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2

        pA = vec_buffer;
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001354:	601a      	str	r2, [r3, #0]

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN
        while (colCnt)
 8001356:	e20a      	b.n	800176e <arm_fully_connected_q7_opt+0x524>
        {
            q31_t     inM11, inM12, inM13, inM14;
            q31_t     inV;

            inV = *__SIMD32(pA)++;
 8001358:	f107 021c 	add.w	r2, r7, #28
 800135c:	6813      	ldr	r3, [r2, #0]
 800135e:	1d19      	adds	r1, r3, #4
 8001360:	6011      	str	r1, [r2, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
            inM11 = *__SIMD32(pB)++;
 8001368:	f107 0220 	add.w	r2, r7, #32
 800136c:	6813      	ldr	r3, [r2, #0]
 800136e:	1d19      	adds	r1, r3, #4
 8001370:	6011      	str	r1, [r2, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            inM12 = __SXTB16(__ROR(inM11, 8));
 8001378:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800137c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001386:	2208      	movs	r2, #8
 8001388:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800138a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800138e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	f002 021f 	and.w	r2, r2, #31
 8001398:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800139a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <arm_fully_connected_q7_opt+0x162>
    return op1;
 80013a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	e007      	b.n	80013bc <arm_fully_connected_q7_opt+0x172>
  return (op1 >> op2) | (op1 << (32U - op2));
 80013ac:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80013b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fa62 f303 	ror.w	r3, r2, r3
 80013bc:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80013c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80013c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	fa2f f283 	sxtb16	r2, r3
 80013cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d0:	601a      	str	r2, [r3, #0]
  return(result);
 80013d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inM11 = __SXTB16(inM11);
 80013dc:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80013e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80013e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fa2f f283 	sxtb16	r2, r3
 80013f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013f4:	601a      	str	r2, [r3, #0]
  return(result);
 80013f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            sum = __SMLAD(inM11, inV, sum);
 8001400:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001404:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8001408:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800140c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001410:	6018      	str	r0, [r3, #0]
 8001412:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001416:	6019      	str	r1, [r3, #0]
 8001418:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800141c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800141e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800142e:	6809      	ldr	r1, [r1, #0]
 8001430:	fb23 1202 	smlad	r2, r3, r2, r1
 8001434:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001438:	601a      	str	r2, [r3, #0]
  return(result);
 800143a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 = __SMLAD(inM12, inV, sum2);
 8001444:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8001448:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800144c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001450:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001454:	6018      	str	r0, [r3, #0]
 8001456:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800145a:	6019      	str	r1, [r3, #0]
 800145c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001460:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001462:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001472:	6809      	ldr	r1, [r1, #0]
 8001474:	fb23 1202 	smlad	r2, r3, r2, r1
 8001478:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800147c:	601a      	str	r2, [r3, #0]
  return(result);
 800147e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            inM13 = *__SIMD32(pB)++;
 8001488:	f107 0220 	add.w	r2, r7, #32
 800148c:	6813      	ldr	r3, [r2, #0]
 800148e:	1d19      	adds	r1, r3, #4
 8001490:	6011      	str	r1, [r2, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            inM14 = __SXTB16(__ROR(inM13, 8));
 8001498:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800149c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014a6:	2208      	movs	r2, #8
 80014a8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80014aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ae:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	f002 021f 	and.w	r2, r2, #31
 80014b8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80014ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d103      	bne.n	80014cc <arm_fully_connected_q7_opt+0x282>
    return op1;
 80014c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	e007      	b.n	80014dc <arm_fully_connected_q7_opt+0x292>
  return (op1 >> op2) | (op1 << (32U - op2));
 80014cc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	fa62 f303 	ror.w	r3, r2, r3
 80014dc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80014e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fa2f f283 	sxtb16	r2, r3
 80014ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014f0:	601a      	str	r2, [r3, #0]
  return(result);
 80014f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
            inM13 = __SXTB16(inM13);
 80014fc:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8001500:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001506:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa2f f283 	sxtb16	r2, r3
 8001510:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001514:	601a      	str	r2, [r3, #0]
  return(result);
 8001516:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            sum3 = __SMLAD(inM13, inV, sum3);
 8001520:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001524:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8001528:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800152c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001530:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001534:	6019      	str	r1, [r3, #0]
 8001536:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800153a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800153c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001540:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800154a:	6809      	ldr	r1, [r1, #0]
 800154c:	fb23 1202 	smlad	r2, r3, r2, r1
 8001550:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001554:	601a      	str	r2, [r3, #0]
  return(result);
 8001556:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 = __SMLAD(inM14, inV, sum4);
 8001560:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001564:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001568:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800156c:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001570:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001574:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800157c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001580:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001584:	fb23 1302 	smlad	r3, r3, r2, r1
 8001588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 800158c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001590:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            inV = *__SIMD32(pA)++;
 8001594:	f107 021c 	add.w	r2, r7, #28
 8001598:	6813      	ldr	r3, [r2, #0]
 800159a:	1d19      	adds	r1, r3, #4
 800159c:	6011      	str	r1, [r2, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
            inM11 = *__SIMD32(pB)++;
 80015a4:	f107 0220 	add.w	r2, r7, #32
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	1d19      	adds	r1, r3, #4
 80015ac:	6011      	str	r1, [r2, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            inM12 = __SXTB16(__ROR(inM11, 8));
 80015b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80015bc:	2308      	movs	r3, #8
 80015be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  op2 %= 32U;
 80015c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (op2 == 0U)
 80015ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <arm_fully_connected_q7_opt+0x392>
    return op1;
 80015d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80015da:	e005      	b.n	80015e8 <arm_fully_connected_q7_opt+0x39e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80015dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80015e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015e4:	fa62 f303 	ror.w	r3, r2, r3
 80015e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80015ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015f0:	fa2f f383 	sxtb16	r3, r3
 80015f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 80015f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80015fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inM11 = __SXTB16(inM11);
 8001600:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001608:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800160c:	fa2f f383 	sxtb16	r3, r3
 8001610:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8001614:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001618:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            sum = __SMLAD(inM11, inV, sum);
 800161c:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8001620:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001624:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001628:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800162c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001630:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001638:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800163c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001640:	fb23 1302 	smlad	r3, r3, r2, r1
 8001644:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 8001648:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800164c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 = __SMLAD(inM12, inV, sum2);
 8001650:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8001654:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001658:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800165c:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8001660:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8001664:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800166c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001670:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001674:	fb23 1302 	smlad	r3, r3, r2, r1
 8001678:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return(result);
 800167c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001680:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            inM13 = *__SIMD32(pB)++;
 8001684:	f107 0220 	add.w	r2, r7, #32
 8001688:	6813      	ldr	r3, [r2, #0]
 800168a:	1d19      	adds	r1, r3, #4
 800168c:	6011      	str	r1, [r2, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            inM14 = __SXTB16(__ROR(inM13, 8));
 8001694:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001698:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800169c:	2308      	movs	r3, #8
 800169e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  op2 %= 32U;
 80016a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  if (op2 == 0U)
 80016ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <arm_fully_connected_q7_opt+0x472>
    return op1;
 80016b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ba:	e005      	b.n	80016c8 <arm_fully_connected_q7_opt+0x47e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80016bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016c4:	fa62 f303 	ror.w	r3, r2, r3
 80016c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016d0:	fa2f f383 	sxtb16	r3, r3
 80016d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 80016d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
            inM13 = __SXTB16(inM13);
 80016e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016ec:	fa2f f383 	sxtb16	r3, r3
 80016f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 80016f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            sum3 = __SMLAD(inM13, inV, sum3);
 80016fc:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8001700:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001704:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001708:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800170c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8001710:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001714:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001718:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800171c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001720:	fb23 1302 	smlad	r3, r3, r2, r1
 8001724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8001728:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800172c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 = __SMLAD(inM14, inV, sum4);
 8001730:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001734:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001738:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800173c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8001740:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8001744:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001748:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800174c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001750:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001754:	fb23 1302 	smlad	r3, r3, r2, r1
 8001758:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800175c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001760:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            colCnt--;
 8001764:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8001768:	3b01      	subs	r3, #1
 800176a:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 800176e:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8001772:	2b00      	cmp	r3, #0
 8001774:	f47f adf0 	bne.w	8001358 <arm_fully_connected_q7_opt+0x10e>
                      [sum4] "+r"(sum4),[pB] "+r"(pB),[pA] "+r"(pA):[colCnt] "r"(colCnt):"r0", "r1", "r2", "r3", "r4");
#endif                          /* ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

        colCnt = dim_vec & 0x3;
 8001778:	1dbb      	adds	r3, r7, #6
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8001784:	e062      	b.n	800184c <arm_fully_connected_q7_opt+0x602>
        {
            q15_t     inV = *pA++;
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1c99      	adds	r1, r3, #2
 800178e:	f107 021c 	add.w	r2, r7, #28
 8001792:	6011      	str	r1, [r2, #0]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
            q7_t      inM = *pB++;
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	1c59      	adds	r1, r3, #1
 80017a2:	f107 0220 	add.w	r2, r7, #32
 80017a6:	6011      	str	r1, [r2, #0]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
            q7_t      inM2 = *pB++;
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1c59      	adds	r1, r3, #1
 80017b6:	f107 0220 	add.w	r2, r7, #32
 80017ba:	6011      	str	r1, [r2, #0]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
            q7_t      inM3 = *pB++;
 80017c2:	f107 0320 	add.w	r3, r7, #32
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1c59      	adds	r1, r3, #1
 80017ca:	f107 0220 	add.w	r2, r7, #32
 80017ce:	6011      	str	r1, [r2, #0]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
            q7_t      inM4 = *pB++;
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	1c59      	adds	r1, r3, #1
 80017de:	f107 0220 	add.w	r2, r7, #32
 80017e2:	6011      	str	r1, [r2, #0]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e

            sum += inV * inM;
 80017ea:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 80017ee:	f997 2181 	ldrsb.w	r2, [r7, #385]	; 0x181
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80017fa:	4413      	add	r3, r2
 80017fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 += inV * inM2;
 8001800:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 8001804:	f997 2180 	ldrsb.w	r2, [r7, #384]	; 0x180
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001810:	4413      	add	r3, r2
 8001812:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            sum3 += inV * inM3;
 8001816:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 800181a:	f997 217f 	ldrsb.w	r2, [r7, #383]	; 0x17f
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001826:	4413      	add	r3, r2
 8001828:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 += inV * inM4;
 800182c:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 8001830:	f997 217e 	ldrsb.w	r2, [r7, #382]	; 0x17e
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800183c:	4413      	add	r3, r2
 800183e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            colCnt--;
 8001842:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8001846:	3b01      	subs	r3, #1
 8001848:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 800184c:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d198      	bne.n	8001786 <arm_fully_connected_q7_opt+0x53c>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8001854:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800185e:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8001862:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8001866:	fa41 f202 	asr.w	r2, r1, r2
 800186a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800186e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001872:	f302 0207 	ssat	r2, #8, r2
 8001876:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800187a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800187e:	b252      	sxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8001882:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800188c:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8001890:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8001894:	fa41 f202 	asr.w	r2, r1, r2
 8001898:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800189c:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80018a0:	f302 0207 	ssat	r2, #8, r2
 80018a4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80018a8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80018ac:	b252      	sxtb	r2, r2
 80018ae:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum3 >> out_shift), 8));
 80018b0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018ba:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 80018be:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80018c2:	fa41 f202 	asr.w	r2, r1, r2
 80018c6:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 80018ca:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80018ce:	f302 0207 	ssat	r2, #8, r2
 80018d2:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80018d6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80018da:	b252      	sxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum4 >> out_shift), 8));
 80018de:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018e8:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 80018ec:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 80018f0:	fa41 f202 	asr.w	r2, r1, r2
 80018f4:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 80018f8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80018fc:	f302 0207 	ssat	r2, #8, r2
 8001900:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8001904:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001908:	b252      	sxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        rowCnt--;
 800190c:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8001910:	3b01      	subs	r3, #1
 8001912:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
    while (rowCnt)
 8001916:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 800191a:	2b00      	cmp	r3, #0
 800191c:	f47f acc1 	bne.w	80012a2 <arm_fully_connected_q7_opt+0x58>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x3;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6

    while (rowCnt)
 800192c:	e136      	b.n	8001b9c <arm_fully_connected_q7_opt+0x952>
    {
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800192e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001938:	f993 3000 	ldrsb.w	r3, [r3]
 800193c:	461a      	mov	r2, r3
 800193e:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8001942:	409a      	lsls	r2, r3
 8001944:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8001948:	3b01      	subs	r3, #1
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        uint16_t  colCnt = dim_vec >> 2;
 8001956:	1dbb      	adds	r3, r7, #6
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a

        pA = vec_buffer;
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001968:	601a      	str	r2, [r3, #0]

        while (colCnt)
 800196a:	e0c7      	b.n	8001afc <arm_fully_connected_q7_opt+0x8b2>
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800197c:	f107 0218 	add.w	r2, r7, #24
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001986:	f107 0214 	add.w	r2, r7, #20
 800198a:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 800198c:	f107 0210 	add.w	r2, r7, #16
 8001990:	6813      	ldr	r3, [r2, #0]
 8001992:	1d19      	adds	r1, r3, #4
 8001994:	6011      	str	r1, [r2, #0]
 8001996:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 800199e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ae:	2208      	movs	r2, #8
 80019b0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80019b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	f002 021f 	and.w	r2, r2, #31
 80019c0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80019c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d103      	bne.n	80019d4 <arm_fully_connected_q7_opt+0x78a>
    return op1;
 80019cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	e007      	b.n	80019e4 <arm_fully_connected_q7_opt+0x79a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80019d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa62 f303 	ror.w	r3, r2, r3
 80019e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80019ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa2f f283 	sxtb16	r2, r3
 80019f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f8:	601a      	str	r2, [r3, #0]
  return(result);
 80019fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8001a0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa2f f283 	sxtb16	r2, r3
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	601a      	str	r2, [r3, #0]
  return(result);
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	601a      	str	r2, [r3, #0]
        return source;
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	601a      	str	r2, [r3, #0]

            inV1 = *__SIMD32(pA)++;
 8001a42:	f107 021c 	add.w	r2, r7, #28
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	1d19      	adds	r1, r3, #4
 8001a4a:	6011      	str	r1, [r2, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            sum = __SMLAD(inV1, inM11, sum);
 8001a52:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a66:	6019      	str	r1, [r3, #0]
 8001a68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a6c:	6018      	str	r0, [r3, #0]
 8001a6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001a84:	6809      	ldr	r1, [r1, #0]
 8001a86:	fb23 1202 	smlad	r2, r3, r2, r1
 8001a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a8e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

            inV2 = *__SIMD32(pA)++;
 8001a9a:	f107 021c 	add.w	r2, r7, #28
 8001a9e:	6813      	ldr	r3, [r2, #0]
 8001aa0:	1d19      	adds	r1, r3, #4
 8001aa2:	6011      	str	r1, [r2, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            sum = __SMLAD(inV2, inM12, sum);
 8001aaa:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001aba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001abe:	6019      	str	r1, [r3, #0]
 8001ac0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ac4:	6018      	str	r0, [r3, #0]
 8001ac6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001aca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001acc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001adc:	6809      	ldr	r1, [r1, #0]
 8001ade:	fb23 1202 	smlad	r2, r3, r2, r1
 8001ae2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ae6:	601a      	str	r2, [r3, #0]
  return(result);
 8001ae8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

            colCnt--;
 8001af2:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8001afc:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f47f af33 	bne.w	800196c <arm_fully_connected_q7_opt+0x722>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8001b06:	1dbb      	adds	r3, r7, #6
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8001b12:	e023      	b.n	8001b5c <arm_fully_connected_q7_opt+0x912>
        {
            q15_t     inV = *pA++;
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1c99      	adds	r1, r3, #2
 8001b1c:	f107 021c 	add.w	r2, r7, #28
 8001b20:	6011      	str	r1, [r2, #0]
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
            q7_t      inM = *pB++;
 8001b28:	f107 0320 	add.w	r3, r7, #32
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	1c59      	adds	r1, r3, #1
 8001b30:	f107 0220 	add.w	r2, r7, #32
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	f887 3151 	strb.w	r3, [r7, #337]	; 0x151
            sum += inV * inM;
 8001b3c:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8001b40:	f997 2151 	ldrsb.w	r2, [r7, #337]	; 0x151
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
            colCnt--;
 8001b52:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8001b5c:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1d7      	bne.n	8001b14 <arm_fully_connected_q7_opt+0x8ca>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8001b64:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001b6e:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8001b72:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8001b76:	fa41 f202 	asr.w	r2, r1, r2
 8001b7a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b7e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b82:	f302 0207 	ssat	r2, #8, r2
 8001b86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b8e:	b252      	sxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8001b92:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
    while (rowCnt)
 8001b9c:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f47f aec4 	bne.w	800192e <arm_fully_connected_q7_opt+0x6e4>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8001ba6:	2300      	movs	r3, #0

}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}

08001bb2 <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 8001bb2:	b490      	push	{r4, r7}
 8001bb4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	f107 040c 	add.w	r4, r7, #12
 8001bbe:	6020      	str	r0, [r4, #0]
 8001bc0:	f107 0008 	add.w	r0, r7, #8
 8001bc4:	6001      	str	r1, [r0, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	1dbb      	adds	r3, r7, #6
 8001bca:	801a      	strh	r2, [r3, #0]
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	460a      	mov	r2, r1
 8001bd0:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 8001bd2:	1dbb      	adds	r3, r7, #6
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001bda:	4413      	add	r3, r2
 8001bdc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 8001be0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001be4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 8001be8:	1dbb      	adds	r3, r7, #6
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 8001bf2:	e345      	b.n	8002280 <arm_nn_mat_mult_kernel_q7_q15+0x6ce>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8001bf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf8:	f107 0208 	add.w	r2, r7, #8
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8001c00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	441a      	add	r2, r3
 8001c0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c12:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	f107 020c 	add.w	r2, r7, #12
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8001c24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c28:	f993 3000 	ldrsb.w	r3, [r3]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001c32:	409a      	lsls	r2, r3
 8001c34:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8001c50:	f993 3000 	ldrsb.w	r3, [r3]
 8001c54:	461a      	mov	r2, r3
 8001c56:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001c60:	3b01      	subs	r3, #1
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8001c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c72:	f993 3000 	ldrsb.w	r3, [r3]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001c82:	3b01      	subs	r3, #1
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001c90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8001c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001caa:	3b01      	subs	r3, #1
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 8001cc2:	e20c      	b.n	80020de <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8001cc4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	1d19      	adds	r1, r3, #4
 8001ccc:	6011      	str	r1, [r2, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            q31_t     inB2 = *__SIMD32(pB2)++;
 8001cd4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	1d19      	adds	r1, r3, #4
 8001cdc:	6011      	str	r1, [r2, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001ce4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce8:	f107 020c 	add.w	r2, r7, #12
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001cf4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cfe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d02:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8001d04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	1d19      	adds	r1, r3, #4
 8001d0c:	6011      	str	r1, [r2, #0]
 8001d0e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8001d16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d26:	2208      	movs	r2, #8
 8001d28:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8001d2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d2e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f002 021f 	and.w	r2, r2, #31
 8001d38:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8001d3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 8001d44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e007      	b.n	8001d5c <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 8001d4c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001d50:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa62 f303 	ror.w	r3, r2, r3
 8001d5c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001d60:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa2f f283 	sxtb16	r2, r3
 8001d6c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d70:	601a      	str	r2, [r3, #0]
  return(result);
 8001d72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d7c:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8001d7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa2f f283 	sxtb16	r2, r3
 8001d94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d98:	601a      	str	r2, [r3, #0]
  return(result);
 8001d9a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001da4:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8001da6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	0c12      	lsrs	r2, r2, #16
 8001db8:	4313      	orrs	r3, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8001dc4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	601a      	str	r2, [r3, #0]
        return source;
 8001de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de4:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001dfa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e04:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001e08:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8001e0a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	1d19      	adds	r1, r3, #4
 8001e12:	6011      	str	r1, [r2, #0]
 8001e14:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8001e1c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8001e30:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e34:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	f002 021f 	and.w	r2, r2, #31
 8001e3e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8001e40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 8001e4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	e007      	b.n	8001e62 <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 8001e52:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001e56:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa62 f303 	ror.w	r3, r2, r3
 8001e62:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e66:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001e68:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa2f f283 	sxtb16	r2, r3
 8001e72:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e76:	601a      	str	r2, [r3, #0]
  return(result);
 8001e78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e82:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8001e84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001e90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa2f f283 	sxtb16	r2, r3
 8001e9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e9e:	601a      	str	r2, [r3, #0]
  return(result);
 8001ea0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eaa:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8001eac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	0c12      	lsrs	r2, r2, #16
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8001eca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	4313      	orrs	r3, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	601a      	str	r2, [r3, #0]
        return source;
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 8001eec:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 8001ef0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001efc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f00:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8001f04:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8001f08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f10:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001f14:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001f18:	fb23 1202 	smlad	r2, r3, r2, r1
 8001f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f20:	601a      	str	r2, [r3, #0]
  return(result);
 8001f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 8001f2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001f38:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f3c:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8001f40:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8001f44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001f48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f4c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001f50:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001f54:	fb23 1302 	smlad	r3, r3, r2, r1
 8001f58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8001f5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 8001f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001f74:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8001f78:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8001f7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001f80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f84:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001f88:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001f8c:	fb23 1302 	smlad	r3, r3, r2, r1
 8001f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8001f94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f98:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 8001f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001fa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fac:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8001fb0:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8001fb4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001fb8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001fbc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001fc0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fc4:	fb23 1302 	smlad	r3, r3, r2, r1
 8001fc8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001fcc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fd0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 8001fd4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fd8:	6813      	ldr	r3, [r2, #0]
 8001fda:	1d19      	adds	r1, r3, #4
 8001fdc:	6011      	str	r1, [r2, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            inB2 = *__SIMD32(pB2)++;
 8001fe4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	1d19      	adds	r1, r3, #4
 8001fec:	6011      	str	r1, [r2, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

            sum = __SMLAD(inA12, inB1, sum);
 8001ff4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002000:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002004:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8002008:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800200c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002010:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002014:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002018:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800201c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002020:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8002024:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002028:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 800202c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4619      	mov	r1, r3
 8002034:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8002038:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800203c:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8002040:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8002044:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002048:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800204c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002050:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8002054:	fb23 1302 	smlad	r3, r3, r2, r1
 8002058:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 800205c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002060:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 8002064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4619      	mov	r1, r3
 800206c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002070:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002074:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8002078:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800207c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002080:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002084:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8002088:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800208c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002090:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8002094:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002098:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 800209c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4619      	mov	r1, r3
 80020a4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80020a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020ac:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 80020b0:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 80020b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80020b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020bc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80020c0:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 80020c4:	fb23 1302 	smlad	r3, r3, r2, r1
 80020c8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 80020cc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80020d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 80020d4:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80020d8:	3b01      	subs	r3, #1
 80020da:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 80020de:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f adee 	bne.w	8001cc4 <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 80020f4:	e056      	b.n	80021a4 <arm_nn_mat_mult_kernel_q7_q15+0x5f2>
        {
            q7_t      inA1 = *pA++;
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	1c59      	adds	r1, r3, #1
 8002102:	6011      	str	r1, [r2, #0]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
            q15_t     inB1 = *pB++;
 800210a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	1c99      	adds	r1, r3, #2
 8002112:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002116:	6011      	str	r1, [r2, #0]
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
            q7_t      inA2 = *pA2++;
 800211e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
            q15_t     inB2 = *pB2++;
 800212e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c99      	adds	r1, r3, #2
 8002136:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800213a:	6011      	str	r1, [r2, #0]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8

            sum += inA1 * inB1;
 8002142:	f997 31cf 	ldrsb.w	r3, [r7, #463]	; 0x1cf
 8002146:	f9b7 21cc 	ldrsh.w	r2, [r7, #460]	; 0x1cc
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8002152:	4413      	add	r3, r2
 8002154:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 8002158:	f997 31cf 	ldrsb.w	r3, [r7, #463]	; 0x1cf
 800215c:	f9b7 21c8 	ldrsh.w	r2, [r7, #456]	; 0x1c8
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8002168:	4413      	add	r3, r2
 800216a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 800216e:	f997 31cb 	ldrsb.w	r3, [r7, #459]	; 0x1cb
 8002172:	f9b7 21cc 	ldrsh.w	r2, [r7, #460]	; 0x1cc
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800217e:	4413      	add	r3, r2
 8002180:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 8002184:	f997 31cb 	ldrsb.w	r3, [r7, #459]	; 0x1cb
 8002188:	f9b7 21c8 	ldrsh.w	r2, [r7, #456]	; 0x1c8
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8002194:	4413      	add	r3, r2
 8002196:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 800219a:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 800219e:	3b01      	subs	r3, #1
 80021a0:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 80021a4:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1a4      	bne.n	80020f6 <arm_nn_mat_mult_kernel_q7_q15+0x544>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80021ac:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 80021b6:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 80021ba:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 80021be:	fa41 f202 	asr.w	r2, r1, r2
 80021c2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80021c6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80021ca:	f302 0207 	ssat	r2, #8, r2
 80021ce:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
 80021d2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80021d6:	b252      	sxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 80021da:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 80021e4:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 80021e8:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 80021ec:	fa41 f202 	asr.w	r2, r1, r2
 80021f0:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80021f4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80021f8:	f302 0207 	ssat	r2, #8, r2
 80021fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002200:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002204:	b252      	sxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8002208:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8002212:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8002216:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 800221a:	fa41 f202 	asr.w	r2, r1, r2
 800221e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8002222:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002226:	f302 0207 	ssat	r2, #8, r2
 800222a:	f8c7 21b0 	str.w	r2, [r7, #432]	; 0x1b0
 800222e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002232:	b252      	sxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8002236:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8002240:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8002244:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8002248:	fa41 f202 	asr.w	r2, r1, r2
 800224c:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8002250:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002254:	f302 0207 	ssat	r2, #8, r2
 8002258:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 800225c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002260:	b252      	sxtb	r2, r2
 8002262:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	f107 010c 	add.w	r1, r7, #12
 8002270:	6809      	ldr	r1, [r1, #0]
 8002272:	440a      	add	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8002276:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 800227a:	3b01      	subs	r3, #1
 800227c:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 8002280:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8002284:	2b00      	cmp	r3, #0
 8002286:	f47f acb5 	bne.w	8001bf4 <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 800228a:	1dbb      	adds	r3, r7, #6
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 81eb 	beq.w	800266e <arm_nn_mat_mult_kernel_q7_q15+0xabc>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8002298:	f107 0320 	add.w	r3, r7, #32
 800229c:	f107 0208 	add.w	r2, r7, #8
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80022a4:	f107 0320 	add.w	r3, r7, #32
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	441a      	add	r2, r3
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80022b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022bc:	f993 3000 	ldrsb.w	r3, [r3]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80022c6:	409a      	lsls	r2, r3
 80022c8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80022cc:	3b01      	subs	r3, #1
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80022da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 80022e4:	f993 3000 	ldrsb.w	r3, [r3]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80022ee:	409a      	lsls	r2, r3
 80022f0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80022f4:	3b01      	subs	r3, #1
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 800230c:	e138      	b.n	8002580 <arm_nn_mat_mult_kernel_q7_q15+0x9ce>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 800230e:	f107 0220 	add.w	r2, r7, #32
 8002312:	6813      	ldr	r3, [r2, #0]
 8002314:	1d19      	adds	r1, r3, #4
 8002316:	6011      	str	r1, [r2, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            q31_t     inB2 = *__SIMD32(pB2)++;
 800231e:	f107 021c 	add.w	r2, r7, #28
 8002322:	6813      	ldr	r3, [r2, #0]
 8002324:	1d19      	adds	r1, r3, #4
 8002326:	6011      	str	r1, [r2, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800232e:	f107 0310 	add.w	r3, r7, #16
 8002332:	f107 020c 	add.w	r2, r7, #12
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800233e:	f107 0218 	add.w	r2, r7, #24
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002348:	f107 0214 	add.w	r2, r7, #20
 800234c:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 800234e:	f107 0210 	add.w	r2, r7, #16
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	1d19      	adds	r1, r3, #4
 8002356:	6011      	str	r1, [r2, #0]
 8002358:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8002360:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002370:	2208      	movs	r2, #8
 8002372:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8002374:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002378:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	f002 021f 	and.w	r2, r2, #31
 8002382:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8002384:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <arm_nn_mat_mult_kernel_q7_q15+0x7e4>
    return op1;
 800238e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e007      	b.n	80023a6 <arm_nn_mat_mult_kernel_q7_q15+0x7f4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002396:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800239a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa62 f303 	ror.w	r3, r2, r3
 80023a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80023aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80023ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa2f f283 	sxtb16	r2, r3
 80023b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023ba:	601a      	str	r2, [r3, #0]
  return(result);
 80023bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023c6:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80023c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80023d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa2f f283 	sxtb16	r2, r3
 80023de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023e2:	601a      	str	r2, [r3, #0]
  return(result);
 80023e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ee:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80023f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	0c12      	lsrs	r2, r2, #16
 8002402:	4313      	orrs	r3, r2
 8002404:	461a      	mov	r2, r3
 8002406:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 800240e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	4313      	orrs	r3, r2
 8002420:	461a      	mov	r2, r3
 8002422:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	601a      	str	r2, [r3, #0]
        return source;
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8002436:	f107 0318 	add.w	r3, r7, #24
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8002442:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8002446:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800244a:	6018      	str	r0, [r3, #0]
 800244c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002450:	6019      	str	r1, [r3, #0]
 8002452:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002456:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002458:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002468:	6809      	ldr	r1, [r1, #0]
 800246a:	fb23 1202 	smlad	r2, r3, r2, r1
 800246e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002472:	601a      	str	r2, [r3, #0]
  return(result);
 8002474:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 800247e:	f107 0318 	add.w	r3, r7, #24
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800248a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800248e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002492:	6018      	str	r0, [r3, #0]
 8002494:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002498:	6019      	str	r1, [r3, #0]
 800249a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800249e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80024a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80024b0:	6809      	ldr	r1, [r1, #0]
 80024b2:	fb23 1202 	smlad	r2, r3, r2, r1
 80024b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024ba:	601a      	str	r2, [r3, #0]
  return(result);
 80024bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 80024c6:	f107 0220 	add.w	r2, r7, #32
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	1d19      	adds	r1, r3, #4
 80024ce:	6011      	str	r1, [r2, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            inB2 = *__SIMD32(pB2)++;
 80024d6:	f107 021c 	add.w	r2, r7, #28
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	1d19      	adds	r1, r3, #4
 80024de:	6011      	str	r1, [r2, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
            sum = __SMLAD(inA12, inB1, sum);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 80024f2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80024f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024fa:	6018      	str	r0, [r3, #0]
 80024fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002500:	6019      	str	r1, [r3, #0]
 8002502:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002506:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002508:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002518:	6809      	ldr	r1, [r1, #0]
 800251a:	fb23 1202 	smlad	r2, r3, r2, r1
 800251e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002522:	601a      	str	r2, [r3, #0]
  return(result);
 8002524:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800253a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800253e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002542:	6018      	str	r0, [r3, #0]
 8002544:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002548:	6019      	str	r1, [r3, #0]
 800254a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800254e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002550:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002560:	6809      	ldr	r1, [r1, #0]
 8002562:	fb23 1202 	smlad	r2, r3, r2, r1
 8002566:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800256a:	601a      	str	r2, [r3, #0]
  return(result);
 800256c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 8002576:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 800257a:	3b01      	subs	r3, #1
 800257c:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8002580:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f aec2 	bne.w	800230e <arm_nn_mat_mult_kernel_q7_q15+0x75c>
        }
        colCnt = numCol_A & 0x3;
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8002596:	e038      	b.n	800260a <arm_nn_mat_mult_kernel_q7_q15+0xa58>
        {
            q7_t      inA1 = *pA++;
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f107 020c 	add.w	r2, r7, #12
 80025a2:	1c59      	adds	r1, r3, #1
 80025a4:	6011      	str	r1, [r2, #0]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
            q15_t     inB1 = *pB++;
 80025ac:	f107 0320 	add.w	r3, r7, #32
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	1c99      	adds	r1, r3, #2
 80025b4:	f107 0220 	add.w	r2, r7, #32
 80025b8:	6011      	str	r1, [r2, #0]
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
            q15_t     inB2 = *pB2++;
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1c99      	adds	r1, r3, #2
 80025c8:	f107 021c 	add.w	r2, r7, #28
 80025cc:	6011      	str	r1, [r2, #0]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a

            sum += inA1 * inB1;
 80025d4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80025d8:	f9b7 219c 	ldrsh.w	r2, [r7, #412]	; 0x19c
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80025e4:	4413      	add	r3, r2
 80025e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 80025ea:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80025ee:	f9b7 219a 	ldrsh.w	r2, [r7, #410]	; 0x19a
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80025fa:	4413      	add	r3, r2
 80025fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 8002600:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8002604:	3b01      	subs	r3, #1
 8002606:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 800260a:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1c2      	bne.n	8002598 <arm_nn_mat_mult_kernel_q7_q15+0x9e6>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8002612:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800261c:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8002620:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8002624:	fa41 f202 	asr.w	r2, r1, r2
 8002628:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800262c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002630:	f302 0207 	ssat	r2, #8, r2
 8002634:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8002638:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800263c:	b252      	sxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8002640:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 800264a:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 800264e:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8002652:	fa41 f202 	asr.w	r2, r1, r2
 8002656:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800265a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800265e:	f302 0207 	ssat	r2, #8, r2
 8002662:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8002666:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800266a:	b252      	sxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 800266e:	1dbb      	adds	r3, r7, #6
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002676:	4413      	add	r3, r2
 8002678:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 800267c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 8002680:	4618      	mov	r0, r3
 8002682:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002686:	46bd      	mov	sp, r7
 8002688:	bc90      	pop	{r4, r7}
 800268a:	4770      	bx	lr

0800268c <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 800268c:	b490      	push	{r4, r7}
 800268e:	b0d2      	sub	sp, #328	; 0x148
 8002690:	af00      	add	r7, sp, #0
 8002692:	f107 040c 	add.w	r4, r7, #12
 8002696:	6020      	str	r0, [r4, #0]
 8002698:	f107 0008 	add.w	r0, r7, #8
 800269c:	6001      	str	r1, [r0, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	1dbb      	adds	r3, r7, #6
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	460a      	mov	r2, r1
 80026a8:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 80026aa:	1dbb      	adds	r3, r7, #6
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80026b2:	4413      	add	r3, r2
 80026b4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80026be:	e2df      	b.n	8002c80 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80026c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c4:	f107 0208 	add.w	r2, r7, #8
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80026cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	441a      	add	r2, r3
 80026da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026de:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 80026f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80026f4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80026f8:	4413      	add	r3, r2
 80026fa:	f993 3000 	ldrsb.w	r3, [r3]
 80026fe:	461a      	mov	r2, r3
 8002700:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8002704:	409a      	lsls	r2, r3
 8002706:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800270a:	3b01      	subs	r3, #1
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8002718:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800271c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002720:	4413      	add	r3, r2
 8002722:	f993 3000 	ldrsb.w	r3, [r3]
 8002726:	461a      	mov	r2, r3
 8002728:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 800272c:	409a      	lsls	r2, r3
 800272e:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8002732:	3b01      	subs	r3, #1
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 8002740:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002744:	3301      	adds	r3, #1
 8002746:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800274a:	4413      	add	r3, r2
 800274c:	f993 3000 	ldrsb.w	r3, [r3]
 8002750:	461a      	mov	r2, r3
 8002752:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8002756:	409a      	lsls	r2, r3
 8002758:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800275c:	3b01      	subs	r3, #1
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 800276a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800276e:	3301      	adds	r3, #1
 8002770:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002774:	4413      	add	r3, r2
 8002776:	f993 3000 	ldrsb.w	r3, [r3]
 800277a:	461a      	mov	r2, r3
 800277c:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8002780:	409a      	lsls	r2, r3
 8002782:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8002786:	3b01      	subs	r3, #1
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 800279e:	e19e      	b.n	8002ade <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 80027a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80027a4:	6813      	ldr	r3, [r2, #0]
 80027a6:	1d19      	adds	r1, r3, #4
 80027a8:	6011      	str	r1, [r2, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            q31_t     inB2 = *__SIMD32(pB2)++;
 80027b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027b4:	6813      	ldr	r3, [r2, #0]
 80027b6:	1d19      	adds	r1, r3, #4
 80027b8:	6011      	str	r1, [r2, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	f107 020c 	add.w	r2, r7, #12
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d0:	653b      	str	r3, [r7, #80]	; 0x50
 80027d2:	f107 0320 	add.w	r3, r7, #32
 80027d6:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 80027d8:	f107 0214 	add.w	r2, r7, #20
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	1d19      	adds	r1, r3, #4
 80027e0:	6011      	str	r1, [r2, #0]
 80027e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 80027ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fa:	2208      	movs	r2, #8
 80027fc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80027fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002802:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800280e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d103      	bne.n	8002820 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 8002818:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e007      	b.n	8002830 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002820:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002824:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa62 f303 	ror.w	r3, r2, r3
 8002830:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002834:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002836:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa2f f283 	sxtb16	r2, r3
 8002840:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002844:	601a      	str	r2, [r3, #0]
  return(result);
 8002846:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002850:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8002852:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800285c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800285e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa2f f283 	sxtb16	r2, r3
 8002868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800286c:	601a      	str	r2, [r3, #0]
  return(result);
 800286e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002878:	601a      	str	r2, [r3, #0]
        return source;
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	677b      	str	r3, [r7, #116]	; 0x74
 8002896:	f107 0318 	add.w	r3, r7, #24
 800289a:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 800289c:	f107 0210 	add.w	r2, r7, #16
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	1d19      	adds	r1, r3, #4
 80028a4:	6011      	str	r1, [r2, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80028ae:	2308      	movs	r3, #8
 80028b0:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 80028b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 80028ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 80028c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c2:	e003      	b.n	80028cc <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 80028c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80028c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028c8:	fa62 f303 	ror.w	r3, r2, r3
 80028cc:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80028ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d0:	fa2f f383 	sxtb16	r3, r3
 80028d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80028d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d8:	461a      	mov	r2, r3
 80028da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028dc:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80028de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80028e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e4:	fa2f f383 	sxtb16	r3, r3
 80028e8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80028ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ec:	461a      	mov	r2, r3
 80028ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f0:	601a      	str	r2, [r3, #0]
        return source;
 80028f2:	f107 0310 	add.w	r3, r7, #16
 80028f6:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 80028f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 80028fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002908:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800290c:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8002910:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002914:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800291e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002920:	fb23 1302 	smlad	r3, r3, r2, r1
 8002924:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 8002926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002928:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 800292c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002938:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800293c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002940:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800294c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002950:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002954:	fb23 1302 	smlad	r3, r3, r2, r1
 8002958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 800295c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002960:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002970:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002974:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8002978:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800297c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002980:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002984:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002988:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800298c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8002994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002998:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4619      	mov	r1, r3
 80029a4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80029a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80029ac:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80029b0:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80029b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80029b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029c0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80029c4:	fb23 1302 	smlad	r3, r3, r2, r1
 80029c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 80029cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 80029d4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80029d8:	6813      	ldr	r3, [r2, #0]
 80029da:	1d19      	adds	r1, r3, #4
 80029dc:	6011      	str	r1, [r2, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            inB2 = *__SIMD32(pB2)++;
 80029e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029e8:	6813      	ldr	r3, [r2, #0]
 80029ea:	1d19      	adds	r1, r3, #4
 80029ec:	6011      	str	r1, [r2, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

            sum = __SMLAD(inA12, inB1, sum);
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002a00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a04:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8002a08:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a18:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002a1c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8002a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002a38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a3c:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8002a40:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002a44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a4c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a50:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8002a54:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8002a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 8002a64:	f107 0318 	add.w	r3, r7, #24
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002a70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a74:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8002a78:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a84:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a88:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002a8c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8002a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002aac:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8002ab0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8002ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002ac0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002ac4:	fb23 1302 	smlad	r3, r3, r2, r1
 8002ac8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8002acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ad0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 8002ad4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8002ade:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f47f ae5c 	bne.w	80027a0 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8002af4:	e056      	b.n	8002ba4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 8002af6:	f107 030c 	add.w	r3, r7, #12
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f107 020c 	add.w	r2, r7, #12
 8002b00:	1c59      	adds	r1, r3, #1
 8002b02:	6011      	str	r1, [r2, #0]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            q15_t     inB1 = *pB++;
 8002b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c99      	adds	r1, r3, #2
 8002b12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002b16:	6011      	str	r1, [r2, #0]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
            q7_t      inA2 = *pA2++;
 8002b1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            q15_t     inB2 = *pB2++;
 8002b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1c99      	adds	r1, r3, #2
 8002b36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b3a:	6011      	str	r1, [r2, #0]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118

            sum += inA1 * inB1;
 8002b42:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8002b46:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	; 0x11c
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8002b52:	4413      	add	r3, r2
 8002b54:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 8002b58:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8002b5c:	f9b7 2118 	ldrsh.w	r2, [r7, #280]	; 0x118
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002b68:	4413      	add	r3, r2
 8002b6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 8002b6e:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 8002b72:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	; 0x11c
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002b7e:	4413      	add	r3, r2
 8002b80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 8002b84:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 8002b88:	f9b7 2118 	ldrsh.w	r2, [r7, #280]	; 0x118
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002b94:	4413      	add	r3, r2
 8002b96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 8002b9a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8002ba4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1a4      	bne.n	8002af6 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8002bac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002bb6:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8002bba:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8002bbe:	fa41 f202 	asr.w	r2, r1, r2
 8002bc2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8002bc6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bca:	f302 0207 	ssat	r2, #8, r2
 8002bce:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8002bd2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002bd6:	b252      	sxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8002bda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002be4:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8002be8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002bec:	fa41 f202 	asr.w	r2, r1, r2
 8002bf0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002bf4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002bf8:	f302 0207 	ssat	r2, #8, r2
 8002bfc:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8002c00:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002c04:	b252      	sxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8002c08:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8002c12:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8002c16:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8002c1a:	fa41 f202 	asr.w	r2, r1, r2
 8002c1e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8002c22:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002c26:	f302 0207 	ssat	r2, #8, r2
 8002c2a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8002c2e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002c32:	b252      	sxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8002c36:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8002c40:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8002c44:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002c48:	fa41 f202 	asr.w	r2, r1, r2
 8002c4c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002c50:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8002c54:	f302 0207 	ssat	r2, #8, r2
 8002c58:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002c5c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002c60:	b252      	sxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	881a      	ldrh	r2, [r3, #0]
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	f107 010c 	add.w	r1, r7, #12
 8002c70:	6809      	ldr	r1, [r1, #0]
 8002c72:	440a      	add	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 8002c76:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f73f ad19 	bgt.w	80026c0 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 8002c8e:	1dbb      	adds	r3, r7, #6
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002c96:	4413      	add	r3, r2
 8002c98:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 8002c9c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc90      	pop	{r4, r7}
 8002caa:	4770      	bx	lr

08002cac <buffer_scale_back_q15_to_q7>:
 *
 * 
 */

static void buffer_scale_back_q15_to_q7(q15_t * buffer, q7_t * target, uint16_t length, uint16_t scale)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	460b      	mov	r3, r1
 8002cbc:	80fb      	strh	r3, [r7, #6]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80bb      	strh	r3, [r7, #4]
    int       i;

    for (i = 0; i < length; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e011      	b.n	8002cec <buffer_scale_back_q15_to_q7+0x40>
    {
        target[i] = (q7_t) (buffer[i] / scale);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	4413      	add	r3, r2
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	0052      	lsls	r2, r2, #1
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	440a      	add	r2, r1
 8002cd6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	88ba      	ldrh	r2, [r7, #4]
 8002cde:	fb91 f2f2 	sdiv	r2, r1, r2
 8002ce2:	b252      	sxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < length; i++)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dce9      	bgt.n	8002cc8 <buffer_scale_back_q15_to_q7+0x1c>
    }
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <compare_and_replace_if_larger_q7>:

static void compare_and_replace_if_larger_q7(q7_t * base,   // base data
                                             q7_t * target, // compare target
                                             const uint16_t length  // data length
    )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b08b      	sub	sp, #44	; 0x2c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
    q7_t     *pIn = base;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	623b      	str	r3, [r7, #32]
    q7_t     *pCom = target;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61fb      	str	r3, [r7, #28]
    union arm_nnword in;
    union arm_nnword com;
    uint16_t  cnt = length >> 2;
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    while (cnt > 0u)
 8002d1c:	e039      	b.n	8002d92 <compare_and_replace_if_larger_q7+0x92>
    {
        in.word = *__SIMD32(pIn);
 8002d1e:	f107 0320 	add.w	r3, r7, #32
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61bb      	str	r3, [r7, #24]
        com.word = *__SIMD32(pCom)++;
 8002d28:	f107 021c 	add.w	r2, r7, #28
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	1d19      	adds	r1, r3, #4
 8002d30:	6011      	str	r1, [r2, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]

        // if version
        if (com.bytes[0] > in.bytes[0])
 8002d36:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002d3a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	dd02      	ble.n	8002d48 <compare_and_replace_if_larger_q7+0x48>
            in.bytes[0] = com.bytes[0];
 8002d42:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d46:	763b      	strb	r3, [r7, #24]
        if (com.bytes[1] > in.bytes[1])
 8002d48:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002d4c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dd02      	ble.n	8002d5a <compare_and_replace_if_larger_q7+0x5a>
            in.bytes[1] = com.bytes[1];
 8002d54:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d58:	767b      	strb	r3, [r7, #25]
        if (com.bytes[2] > in.bytes[2])
 8002d5a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002d5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	dd02      	ble.n	8002d6c <compare_and_replace_if_larger_q7+0x6c>
            in.bytes[2] = com.bytes[2];
 8002d66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d6a:	76bb      	strb	r3, [r7, #26]
        if (com.bytes[3] > in.bytes[3])
 8002d6c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d70:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dd02      	ble.n	8002d7e <compare_and_replace_if_larger_q7+0x7e>
            in.bytes[3] = com.bytes[3];
 8002d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d7c:	76fb      	strb	r3, [r7, #27]

        *__SIMD32(pIn)++ = in.word;
 8002d7e:	f107 0220 	add.w	r2, r7, #32
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	1d19      	adds	r1, r3, #4
 8002d86:	6011      	str	r1, [r2, #0]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	601a      	str	r2, [r3, #0]

        cnt--;
 8002d8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cnt > 0u)
 8002d92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1c2      	bne.n	8002d1e <compare_and_replace_if_larger_q7+0x1e>
    }
}
 8002d98:	bf00      	nop
 8002d9a:	372c      	adds	r7, #44	; 0x2c
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <accumulate_q7_to_q15>:

static void accumulate_q7_to_q15(q15_t * base, q7_t * target, const uint16_t length)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b09b      	sub	sp, #108	; 0x6c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
    q15_t    *pCnt = base;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
    q7_t     *pV = target;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	617b      	str	r3, [r7, #20]
    q31_t     v1, v2, vo1, vo2;
    uint16_t  cnt = length >> 2;
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    q31_t     in;

    while (cnt > 0u)
 8002dc2:	e062      	b.n	8002e8a <accumulate_q7_to_q15+0xe6>
    {
        q31_t     value = *__SIMD32(pV)++;
 8002dc4:	f107 0214 	add.w	r2, r7, #20
 8002dc8:	6813      	ldr	r3, [r2, #0]
 8002dca:	1d19      	adds	r1, r3, #4
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	663b      	str	r3, [r7, #96]	; 0x60
        v1 = __SXTB16(__ROR(value, 8));
 8002dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	61fb      	str	r3, [r7, #28]
  op2 %= 32U;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	61fb      	str	r3, [r7, #28]
  if (op2 == 0U)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <accumulate_q7_to_q15+0x48>
    return op1;
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	e003      	b.n	8002df4 <accumulate_q7_to_q15+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa62 f303 	ror.w	r3, r2, r3
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	fa2f f383 	sxtb16	r3, r3
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	65fb      	str	r3, [r7, #92]	; 0x5c
        v2 = __SXTB16(value);
 8002e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	fa2f f383 	sxtb16	r3, r3
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef ARM_MATH_BIG_ENDIAN

        vo2 = __PKHTB(v1, v2, 16);
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	041b      	lsls	r3, r3, #16
 8002e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e1a:	0c12      	lsrs	r2, r2, #16
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
        vo1 = __PKHBT(v2, v1, 16);
 8002e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	653b      	str	r3, [r7, #80]	; 0x50
        vo1 = __PKHTB(v1, v2, 16);
        vo2 = __PKHBT(v2, v1, 16);

#endif

        in = *__SIMD32(pCnt);
 8002e2c:	f107 0318 	add.w	r3, r7, #24
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	64fb      	str	r3, [r7, #76]	; 0x4c
        *__SIMD32(pCnt)++ = __QADD16(vo1, in);
 8002e36:	f107 0218 	add.w	r2, r7, #24
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	1d19      	adds	r1, r3, #4
 8002e3e:	6011      	str	r1, [r2, #0]
 8002e40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e44:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002e46:	63ba      	str	r2, [r7, #56]	; 0x38
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e4c:	fa92 f211 	qadd16	r2, r2, r1
 8002e50:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e54:	601a      	str	r2, [r3, #0]

        in = *__SIMD32(pCnt);
 8002e56:	f107 0318 	add.w	r3, r7, #24
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
        *__SIMD32(pCnt)++ = __QADD16(vo2, in);
 8002e60:	f107 0218 	add.w	r2, r7, #24
 8002e64:	6813      	ldr	r3, [r2, #0]
 8002e66:	1d19      	adds	r1, r3, #4
 8002e68:	6011      	str	r1, [r2, #0]
 8002e6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e70:	647a      	str	r2, [r7, #68]	; 0x44
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e76:	fa92 f211 	qadd16	r2, r2, r1
 8002e7a:	643a      	str	r2, [r7, #64]	; 0x40
  return(result);
 8002e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]

        cnt--;
 8002e80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e84:	3b01      	subs	r3, #1
 8002e86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    while (cnt > 0u)
 8002e8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d198      	bne.n	8002dc4 <accumulate_q7_to_q15+0x20>
    }
    cnt = length & 0x3;
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    while (cnt > 0u)
 8002e9c:	e014      	b.n	8002ec8 <accumulate_q7_to_q15+0x124>
    {
        *pCnt++ += *pV++;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	617a      	str	r2, [r7, #20]
 8002ea4:	f993 0000 	ldrsb.w	r0, [r3]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1c9a      	adds	r2, r3, #2
 8002eac:	61ba      	str	r2, [r7, #24]
 8002eae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002eb2:	b291      	uxth	r1, r2
 8002eb4:	b282      	uxth	r2, r0
 8002eb6:	440a      	add	r2, r1
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	b212      	sxth	r2, r2
 8002ebc:	801a      	strh	r2, [r3, #0]
        cnt--;
 8002ebe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    while (cnt > 0u)
 8002ec8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e6      	bne.n	8002e9e <accumulate_q7_to_q15+0xfa>
    }
}
 8002ed0:	bf00      	nop
 8002ed2:	376c      	adds	r7, #108	; 0x6c
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <arm_maxpool_q7_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	; 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    int16_t   i_x, i_y;

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002efa:	e08d      	b.n	8003018 <arm_maxpool_q7_HWC+0x13c>
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002f00:	e07d      	b.n	8002ffe <arm_maxpool_q7_HWC+0x122>
        {
            /* for each output pixel */
            q7_t     *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8002f02:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002f06:	897a      	ldrh	r2, [r7, #10]
 8002f08:	fb02 f203 	mul.w	r2, r2, r3
 8002f0c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f10:	4413      	add	r3, r2
 8002f12:	893a      	ldrh	r2, [r7, #8]
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
            q7_t     *win_start;
            q7_t     *win_stop;
            if (i_x * stride - padding < 0)
 8002f20:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f24:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002f26:	fb02 f203 	mul.w	r2, r2, r3
 8002f2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	da02      	bge.n	8002f38 <arm_maxpool_q7_HWC+0x5c>
            {
                win_start = target;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f36:	e013      	b.n	8002f60 <arm_maxpool_q7_HWC+0x84>
            } else
            {
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 8002f38:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002f3c:	897a      	ldrh	r2, [r7, #10]
 8002f3e:	fb02 f203 	mul.w	r2, r2, r3
 8002f42:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f46:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	441a      	add	r2, r3
 8002f4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	893a      	ldrh	r2, [r7, #8]
 8002f54:	fb02 f303 	mul.w	r3, r2, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 8002f60:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f64:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002f66:	fb02 f203 	mul.w	r2, r2, r3
 8002f6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f6c:	1ad2      	subs	r2, r2, r3
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	441a      	add	r2, r3
 8002f72:	897b      	ldrh	r3, [r7, #10]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	db0d      	blt.n	8002f94 <arm_maxpool_q7_HWC+0xb8>
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 8002f78:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	897a      	ldrh	r2, [r7, #10]
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	893a      	ldrh	r2, [r7, #8]
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	e015      	b.n	8002fc0 <arm_maxpool_q7_HWC+0xe4>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 8002f94:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002f98:	897a      	ldrh	r2, [r7, #10]
 8002f9a:	fb02 f203 	mul.w	r2, r2, r3
 8002f9e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002fa2:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	441a      	add	r2, r3
 8002faa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002fac:	1ad2      	subs	r2, r2, r3
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	893a      	ldrh	r2, [r7, #8]
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* first step is to copy over initial data */
            /* arm_copy_q7(win_start, target, ch_im_in); */
            memmove(target, win_start, ch_im_in);
 8002fc0:	893b      	ldrh	r3, [r7, #8]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc6:	69b8      	ldr	r0, [r7, #24]
 8002fc8:	f000 fe07 	bl	8003bda <memmove>

            /* start the max operation from the second part */
            win_start += ch_im_in;
 8002fcc:	893b      	ldrh	r3, [r7, #8]
 8002fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd0:	4413      	add	r3, r2
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
            for (; win_start < win_stop; win_start += ch_im_in)
 8002fd4:	e009      	b.n	8002fea <arm_maxpool_q7_HWC+0x10e>
            {
                compare_and_replace_if_larger_q7(target, win_start, ch_im_in);
 8002fd6:	893b      	ldrh	r3, [r7, #8]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fdc:	69b8      	ldr	r0, [r7, #24]
 8002fde:	f7ff fe8f 	bl	8002d00 <compare_and_replace_if_larger_q7>
            for (; win_start < win_stop; win_start += ch_im_in)
 8002fe2:	893b      	ldrh	r3, [r7, #8]
 8002fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe6:	4413      	add	r3, r2
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d3f1      	bcc.n	8002fd6 <arm_maxpool_q7_HWC+0xfa>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8002ff2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002ffe:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8003002:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003006:	429a      	cmp	r2, r3
 8003008:	f6ff af7b 	blt.w	8002f02 <arm_maxpool_q7_HWC+0x26>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 800300c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003010:	b29b      	uxth	r3, r3
 8003012:	3301      	adds	r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003018:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800301c:	897b      	ldrh	r3, [r7, #10]
 800301e:	429a      	cmp	r2, r3
 8003020:	f6ff af6c 	blt.w	8002efc <arm_maxpool_q7_HWC+0x20>
            }
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003024:	2300      	movs	r3, #0
 8003026:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003028:	e084      	b.n	8003134 <arm_maxpool_q7_HWC+0x258>
    {

        /* for each output row */
        q7_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 800302a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800302e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	893a      	ldrh	r2, [r7, #8]
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	461a      	mov	r2, r3
 800303e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003040:	4413      	add	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
        q7_t     *row_start;
        q7_t     *row_end;
        /* setting the starting row */
        if (i_y * stride - padding < 0)
 8003044:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003048:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800304a:	fb02 f203 	mul.w	r2, r2, r3
 800304e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	da02      	bge.n	800305c <arm_maxpool_q7_HWC+0x180>
        {
            row_start = Im_in;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	623b      	str	r3, [r7, #32]
 800305a:	e010      	b.n	800307e <arm_maxpool_q7_HWC+0x1a2>
        } else
        {
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 800305c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003060:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003062:	fb02 f203 	mul.w	r2, r2, r3
 8003066:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	897a      	ldrh	r2, [r7, #10]
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	893a      	ldrh	r2, [r7, #8]
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	623b      	str	r3, [r7, #32]
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 800307e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003082:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003084:	fb02 f203 	mul.w	r2, r2, r3
 8003088:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800308a:	1ad2      	subs	r2, r2, r3
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	441a      	add	r2, r3
 8003090:	897b      	ldrh	r3, [r7, #10]
 8003092:	429a      	cmp	r2, r3
 8003094:	db0b      	blt.n	80030ae <arm_maxpool_q7_HWC+0x1d2>
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	897a      	ldrh	r2, [r7, #10]
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	893a      	ldrh	r2, [r7, #8]
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e012      	b.n	80030d4 <arm_maxpool_q7_HWC+0x1f8>
        } else
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 80030ae:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80030b2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80030b4:	fb02 f203 	mul.w	r2, r2, r3
 80030b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030ba:	1ad2      	subs	r2, r2, r3
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	4413      	add	r3, r2
 80030c0:	897a      	ldrh	r2, [r7, #10]
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	893a      	ldrh	r2, [r7, #8]
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	61fb      	str	r3, [r7, #28]
        }

        /* copy over the first row */
        /* arm_copy_q7(row_start, target, dim_im_out * ch_im_in); */
        memmove(target, row_start, dim_im_out * ch_im_in);
 80030d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030d8:	893a      	ldrh	r2, [r7, #8]
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6a39      	ldr	r1, [r7, #32]
 80030e2:	6978      	ldr	r0, [r7, #20]
 80030e4:	f000 fd79 	bl	8003bda <memmove>

        /* move over to next row */
        row_start += ch_im_in * dim_im_in;
 80030e8:	893b      	ldrh	r3, [r7, #8]
 80030ea:	897a      	ldrh	r2, [r7, #10]
 80030ec:	fb02 f303 	mul.w	r3, r2, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	4413      	add	r3, r2
 80030f6:	623b      	str	r3, [r7, #32]

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 80030f8:	e012      	b.n	8003120 <arm_maxpool_q7_HWC+0x244>
        {
            compare_and_replace_if_larger_q7(target, row_start, dim_im_out * ch_im_in);
 80030fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80030fe:	893b      	ldrh	r3, [r7, #8]
 8003100:	fb12 f303 	smulbb	r3, r2, r3
 8003104:	b29b      	uxth	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	6978      	ldr	r0, [r7, #20]
 800310c:	f7ff fdf8 	bl	8002d00 <compare_and_replace_if_larger_q7>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	893a      	ldrh	r2, [r7, #8]
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	4413      	add	r3, r2
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	429a      	cmp	r2, r3
 8003126:	d3e8      	bcc.n	80030fa <arm_maxpool_q7_HWC+0x21e>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003128:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800312c:	b29b      	uxth	r3, r3
 800312e:	3301      	adds	r3, #1
 8003130:	b29b      	uxth	r3, r3
 8003132:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003134:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8003138:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800313c:	429a      	cmp	r2, r3
 800313e:	f6ff af74 	blt.w	800302a <arm_maxpool_q7_HWC+0x14e>
        }
    }

#endif                          /* ARM_MATH_DSP */

}
 8003142:	bf00      	nop
 8003144:	3730      	adds	r7, #48	; 0x30
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <arm_avepool_q7_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b08e      	sub	sp, #56	; 0x38
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	4608      	mov	r0, r1
 8003154:	4611      	mov	r1, r2
 8003156:	461a      	mov	r2, r3
 8003158:	4603      	mov	r3, r0
 800315a:	817b      	strh	r3, [r7, #10]
 800315c:	460b      	mov	r3, r1
 800315e:	813b      	strh	r3, [r7, #8]
 8003160:	4613      	mov	r3, r2
 8003162:	80fb      	strh	r3, [r7, #6]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    q15_t    *buffer = (q15_t *) bufferA;
 8003164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003166:	61fb      	str	r3, [r7, #28]
    int16_t   i_x, i_y;
    int16_t   count = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	867b      	strh	r3, [r7, #50]	; 0x32

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 800316c:	2300      	movs	r3, #0
 800316e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003170:	e0a3      	b.n	80032ba <arm_avepool_q7_HWC+0x170>
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 8003172:	2300      	movs	r3, #0
 8003174:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003176:	e093      	b.n	80032a0 <arm_avepool_q7_HWC+0x156>
        {
            /* for each output pixel */
            q7_t     *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8003178:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800317c:	897a      	ldrh	r2, [r7, #10]
 800317e:	fb02 f203 	mul.w	r2, r2, r3
 8003182:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003186:	4413      	add	r3, r2
 8003188:	893a      	ldrh	r2, [r7, #8]
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
            q7_t     *win_start;
            q7_t     *win_stop;
            if (i_x * stride - padding < 0)
 8003196:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800319a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800319e:	fb02 f203 	mul.w	r2, r2, r3
 80031a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da02      	bge.n	80031b2 <arm_avepool_q7_HWC+0x68>
            {
                win_start = target;
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b0:	e015      	b.n	80031de <arm_avepool_q7_HWC+0x94>
            } else
            {
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 80031b2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80031b6:	897a      	ldrh	r2, [r7, #10]
 80031b8:	fb02 f203 	mul.w	r2, r2, r3
 80031bc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80031c0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	441a      	add	r2, r3
 80031ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 80031de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80031e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80031e6:	fb02 f203 	mul.w	r2, r2, r3
 80031ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	441a      	add	r2, r3
 80031f4:	897b      	ldrh	r3, [r7, #10]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	db0d      	blt.n	8003216 <arm_avepool_q7_HWC+0xcc>
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 80031fa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80031fe:	3301      	adds	r3, #1
 8003200:	897a      	ldrh	r2, [r7, #10]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	893a      	ldrh	r2, [r7, #8]
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	461a      	mov	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
 8003214:	e017      	b.n	8003246 <arm_avepool_q7_HWC+0xfc>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 8003216:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800321a:	897a      	ldrh	r2, [r7, #10]
 800321c:	fb02 f203 	mul.w	r2, r2, r3
 8003220:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003224:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	441a      	add	r2, r3
 800322e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	4413      	add	r3, r2
 8003238:	893a      	ldrh	r2, [r7, #8]
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* first step is to copy over initial data */
            arm_q7_to_q15_no_shift(win_start, buffer, ch_im_in);
 8003246:	893b      	ldrh	r3, [r7, #8]
 8003248:	461a      	mov	r2, r3
 800324a:	69f9      	ldr	r1, [r7, #28]
 800324c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800324e:	f000 f8e8 	bl	8003422 <arm_q7_to_q15_no_shift>
            count = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	867b      	strh	r3, [r7, #50]	; 0x32

            /* start the max operation from the second part */
            win_start += ch_im_in;
 8003256:	893b      	ldrh	r3, [r7, #8]
 8003258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800325a:	4413      	add	r3, r2
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (; win_start < win_stop; win_start += ch_im_in)
 800325e:	e00f      	b.n	8003280 <arm_avepool_q7_HWC+0x136>
            {
                accumulate_q7_to_q15(buffer, win_start, ch_im_in);
 8003260:	893b      	ldrh	r3, [r7, #8]
 8003262:	461a      	mov	r2, r3
 8003264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003266:	69f8      	ldr	r0, [r7, #28]
 8003268:	f7ff fd9c 	bl	8002da4 <accumulate_q7_to_q15>
                count++;
 800326c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003270:	b29b      	uxth	r3, r3
 8003272:	3301      	adds	r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	867b      	strh	r3, [r7, #50]	; 0x32
            for (; win_start < win_stop; win_start += ch_im_in)
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327c:	4413      	add	r3, r2
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	429a      	cmp	r2, r3
 8003286:	d3eb      	bcc.n	8003260 <arm_avepool_q7_HWC+0x116>
            }
            buffer_scale_back_q15_to_q7(buffer, target, ch_im_in, count);
 8003288:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800328a:	893a      	ldrh	r2, [r7, #8]
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	69f8      	ldr	r0, [r7, #28]
 8003290:	f7ff fd0c 	bl	8002cac <buffer_scale_back_q15_to_q7>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8003294:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003298:	b29b      	uxth	r3, r3
 800329a:	3301      	adds	r3, #1
 800329c:	b29b      	uxth	r3, r3
 800329e:	86fb      	strh	r3, [r7, #54]	; 0x36
 80032a0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80032a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032a8:	429a      	cmp	r2, r3
 80032aa:	f6ff af65 	blt.w	8003178 <arm_avepool_q7_HWC+0x2e>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 80032ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80032ba:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f6ff af56 	blt.w	8003172 <arm_avepool_q7_HWC+0x28>
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80032ca:	e09f      	b.n	800340c <arm_avepool_q7_HWC+0x2c2>
    {
        /* for each output row */
        q7_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 80032cc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80032d0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80032d4:	fb02 f303 	mul.w	r3, r2, r3
 80032d8:	893a      	ldrh	r2, [r7, #8]
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e2:	4413      	add	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
        q7_t     *row_start;
        q7_t     *row_end;
        /* setting the starting row */
        if (i_y * stride - padding < 0)
 80032e6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80032ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80032ee:	fb02 f203 	mul.w	r2, r2, r3
 80032f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da02      	bge.n	8003302 <arm_avepool_q7_HWC+0x1b8>
        {
            row_start = Im_in;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	e012      	b.n	8003328 <arm_avepool_q7_HWC+0x1de>
        } else
        {
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 8003302:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003306:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800330a:	fb02 f203 	mul.w	r2, r2, r3
 800330e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	897a      	ldrh	r2, [r7, #10]
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	893a      	ldrh	r2, [r7, #8]
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	461a      	mov	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 8003328:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800332c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003330:	fb02 f203 	mul.w	r2, r2, r3
 8003334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003338:	1ad2      	subs	r2, r2, r3
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	441a      	add	r2, r3
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	429a      	cmp	r2, r3
 8003342:	db0b      	blt.n	800335c <arm_avepool_q7_HWC+0x212>
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 8003344:	897b      	ldrh	r3, [r7, #10]
 8003346:	897a      	ldrh	r2, [r7, #10]
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	893a      	ldrh	r2, [r7, #8]
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	623b      	str	r3, [r7, #32]
 800335a:	e014      	b.n	8003386 <arm_avepool_q7_HWC+0x23c>
        } else
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 800335c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003360:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003364:	fb02 f203 	mul.w	r2, r2, r3
 8003368:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800336c:	1ad2      	subs	r2, r2, r3
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4413      	add	r3, r2
 8003372:	897a      	ldrh	r2, [r7, #10]
 8003374:	fb02 f303 	mul.w	r3, r2, r3
 8003378:	893a      	ldrh	r2, [r7, #8]
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	623b      	str	r3, [r7, #32]
        }

        /* copy over the first row */
        arm_q7_to_q15_no_shift(row_start, buffer, dim_im_out * ch_im_in);
 8003386:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800338a:	893a      	ldrh	r2, [r7, #8]
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	461a      	mov	r2, r3
 8003392:	69f9      	ldr	r1, [r7, #28]
 8003394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003396:	f000 f844 	bl	8003422 <arm_q7_to_q15_no_shift>
        count = 1;
 800339a:	2301      	movs	r3, #1
 800339c:	867b      	strh	r3, [r7, #50]	; 0x32

        /* move over to next row */
        row_start += ch_im_in * dim_im_in;
 800339e:	893b      	ldrh	r3, [r7, #8]
 80033a0:	897a      	ldrh	r2, [r7, #10]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	4413      	add	r3, r2
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 80033ae:	e018      	b.n	80033e2 <arm_avepool_q7_HWC+0x298>
        {
            accumulate_q7_to_q15(buffer, row_start, dim_im_out * ch_im_in);
 80033b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80033b4:	893b      	ldrh	r3, [r7, #8]
 80033b6:	fb12 f303 	smulbb	r3, r2, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c0:	69f8      	ldr	r0, [r7, #28]
 80033c2:	f7ff fcef 	bl	8002da4 <accumulate_q7_to_q15>
            count++;
 80033c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	867b      	strh	r3, [r7, #50]	; 0x32
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	893a      	ldrh	r2, [r7, #8]
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	4413      	add	r3, r2
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d3e2      	bcc.n	80033b0 <arm_avepool_q7_HWC+0x266>
        }
        buffer_scale_back_q15_to_q7(buffer, target, dim_im_out * ch_im_in, count);
 80033ea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80033ee:	893b      	ldrh	r3, [r7, #8]
 80033f0:	fb12 f303 	smulbb	r3, r2, r3
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80033f8:	6979      	ldr	r1, [r7, #20]
 80033fa:	69f8      	ldr	r0, [r7, #28]
 80033fc:	f7ff fc56 	bl	8002cac <buffer_scale_back_q15_to_q7>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003400:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003404:	b29b      	uxth	r3, r3
 8003406:	3301      	adds	r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800340c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003410:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003414:	429a      	cmp	r2, r3
 8003416:	f6ff af59 	blt.w	80032cc <arm_avepool_q7_HWC+0x182>
        }
    }

#endif                          /* ARM_MATH_DSP */

}
 800341a:	bf00      	nop
 800341c:	3738      	adds	r7, #56	; 0x38
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <arm_q7_to_q15_no_shift>:
 * </pre>    
 *   
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8003422:	b480      	push	{r7}
 8003424:	b093      	sub	sp, #76	; 0x4c
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	617b      	str	r3, [r7, #20]
    q31_t     out1, out2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8003438:	e044      	b.n	80034c4 <arm_q7_to_q15_no_shift+0xa2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 800343a:	f107 0214 	add.w	r2, r7, #20
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	1d19      	adds	r1, r3, #4
 8003442:	6011      	str	r1, [r2, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8003448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	2308      	movs	r3, #8
 800344e:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <arm_q7_to_q15_no_shift+0x40>
    return op1;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	e003      	b.n	800346a <arm_q7_to_q15_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	fa62 f303 	ror.w	r3, r2, r3
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	fa2f f383 	sxtb16	r3, r3
 8003472:	623b      	str	r3, [r7, #32]
  return(result);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8003478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	fa2f f383 	sxtb16	r3, r3
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003490:	0c12      	lsrs	r2, r2, #16
 8003492:	4313      	orrs	r3, r2
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
        out1 = __PKHBT(in2, in1, 16);
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	b29a      	uxth	r2, r3
 800349a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	4313      	orrs	r3, r2
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 80034a2:	f107 0208 	add.w	r2, r7, #8
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	1d19      	adds	r1, r3, #4
 80034aa:	6011      	str	r1, [r2, #0]
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 80034b0:	f107 0208 	add.w	r2, r7, #8
 80034b4:	6813      	ldr	r3, [r2, #0]
 80034b6:	1d19      	adds	r1, r3, #4
 80034b8:	6011      	str	r1, [r2, #0]
 80034ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034bc:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 80034be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c0:	3b01      	subs	r3, #1
 80034c2:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 80034c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1b7      	bne.n	800343a <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 80034d2:	e00c      	b.n	80034ee <arm_q7_to_q15_no_shift+0xcc>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	60ba      	str	r2, [r7, #8]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	1c51      	adds	r1, r2, #1
 80034de:	6179      	str	r1, [r7, #20]
 80034e0:	f992 2000 	ldrsb.w	r2, [r2]
 80034e4:	b212      	sxth	r2, r2
 80034e6:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 80034e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ea:	3b01      	subs	r3, #1
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 80034ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ef      	bne.n	80034d4 <arm_q7_to_q15_no_shift+0xb2>
    }

}
 80034f4:	bf00      	nop
 80034f6:	374c      	adds	r7, #76	; 0x4c
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8003500:	b480      	push	{r7}
 8003502:	b091      	sub	sp, #68	; 0x44
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8003516:	e037      	b.n	8003588 <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8003518:	f107 0214 	add.w	r2, r7, #20
 800351c:	6813      	ldr	r3, [r2, #0]
 800351e:	1d19      	adds	r1, r3, #4
 8003520:	6011      	str	r1, [r2, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	2308      	movs	r3, #8
 800352c:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	e003      	b.n	8003548 <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	fa62 f303 	ror.w	r3, r2, r3
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	fa2f f383 	sxtb16	r3, r3
 8003550:	623b      	str	r3, [r7, #32]
  return(result);
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	fa2f f383 	sxtb16	r3, r3
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 8003566:	f107 0208 	add.w	r2, r7, #8
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	1d19      	adds	r1, r3, #4
 800356e:	6011      	str	r1, [r2, #0]
 8003570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003572:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8003574:	f107 0208 	add.w	r2, r7, #8
 8003578:	6813      	ldr	r3, [r2, #0]
 800357a:	1d19      	adds	r1, r3, #4
 800357c:	6011      	str	r1, [r2, #0]
 800357e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003580:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8003582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003584:	3b01      	subs	r3, #1
 8003586:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8003588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1c4      	bne.n	8003518 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8003596:	e00c      	b.n	80035b2 <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	1c9a      	adds	r2, r3, #2
 800359c:	60ba      	str	r2, [r7, #8]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	1c51      	adds	r1, r2, #1
 80035a2:	6179      	str	r1, [r7, #20]
 80035a4:	f992 2000 	ldrsb.w	r2, [r2]
 80035a8:	b212      	sxth	r2, r2
 80035aa:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	3b01      	subs	r3, #1
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 80035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ef      	bne.n	8003598 <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 80035b8:	bf00      	nop
 80035ba:	3744      	adds	r7, #68	; 0x44
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b08f      	sub	sp, #60	; 0x3c
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 80035de:	e032      	b.n	8003646 <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 80035e0:	f107 0210 	add.w	r2, r7, #16
 80035e4:	6813      	ldr	r3, [r2, #0]
 80035e6:	1d19      	adds	r1, r3, #4
 80035e8:	6011      	str	r1, [r2, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	2307      	movs	r3, #7
 80035f8:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <arm_relu_q7+0x48>
    return op1;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	e003      	b.n	8003614 <arm_relu_q7+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fa62 f303 	ror.w	r3, r2, r3
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	2200      	movs	r2, #0
 800361a:	627a      	str	r2, [r7, #36]	; 0x24
 800361c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	6a3a      	ldr	r2, [r7, #32]
 8003622:	fac3 f312 	qsub8	r3, r3, r2
 8003626:	61fb      	str	r3, [r7, #28]
  return(result);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 800362c:	f107 020c 	add.w	r2, r7, #12
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	1d19      	adds	r1, r3, #4
 8003634:	6011      	str	r1, [r2, #0]
 8003636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003638:	43d1      	mvns	r1, r2
 800363a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800363c:	400a      	ands	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
        i--;
 8003640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003642:	3b01      	subs	r3, #1
 8003644:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8003646:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1c9      	bne.n	80035e0 <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8003654:	e00d      	b.n	8003672 <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f993 3000 	ldrsb.w	r3, [r3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	da02      	bge.n	8003666 <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3301      	adds	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
        i--;
 800366c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800366e:	3b01      	subs	r3, #1
 8003670:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8003672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ee      	bne.n	8003656 <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8003678:	bf00      	nop
 800367a:	373c      	adds	r7, #60	; 0x3c
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <arm_softmax_q7>:
   *  with a log(2) scaling factor.
   *
   */

void arm_softmax_q7(const q7_t * vec_in, const uint16_t dim_vec, q7_t * p_out)
{
 8003684:	b480      	push	{r7}
 8003686:	b08f      	sub	sp, #60	; 0x3c
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	460b      	mov	r3, r1
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	817b      	strh	r3, [r7, #10]
    q31_t     sum;
    int16_t   i;
    uint8_t   shift;
    q15_t     base;
    base = -257;
 8003692:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8003696:	863b      	strh	r3, [r7, #48]	; 0x30

    /* We first search for the maximum */
    for (i = 0; i < dim_vec; i++)
 8003698:	2300      	movs	r3, #0
 800369a:	867b      	strh	r3, [r7, #50]	; 0x32
 800369c:	e017      	b.n	80036ce <arm_softmax_q7+0x4a>
    {
        if (vec_in[i] > base)
 800369e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	f993 3000 	ldrsb.w	r3, [r3]
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80036b0:	429a      	cmp	r2, r3
 80036b2:	da06      	bge.n	80036c2 <arm_softmax_q7+0x3e>
        {
            base = vec_in[i];
 80036b4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	f993 3000 	ldrsb.w	r3, [r3]
 80036c0:	863b      	strh	r3, [r7, #48]	; 0x30
    for (i = 0; i < dim_vec; i++)
 80036c2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80036ce:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80036d2:	897b      	ldrh	r3, [r7, #10]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	dbe2      	blt.n	800369e <arm_softmax_q7+0x1a>
    /* 
     * So the base is set to max-8, meaning 
     * that we ignore really small values. 
     * anyway, they will be 0 after shrinking to q7_t.
     */
    base = base - 8;
 80036d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80036da:	3b08      	subs	r3, #8
 80036dc:	b29b      	uxth	r3, r3
 80036de:	863b      	strh	r3, [r7, #48]	; 0x30

    sum = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < dim_vec; i++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	867b      	strh	r3, [r7, #50]	; 0x32
 80036e8:	e02a      	b.n	8003740 <arm_softmax_q7+0xbc>
    {
        if (vec_in[i] > base) 
 80036ea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4413      	add	r3, r2
 80036f2:	f993 3000 	ldrsb.w	r3, [r3]
 80036f6:	b21b      	sxth	r3, r3
 80036f8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80036fc:	429a      	cmp	r2, r3
 80036fe:	da19      	bge.n	8003734 <arm_softmax_q7+0xb0>
        {
            shift = (uint8_t)__USAT(vec_in[i] - base, 5);
 8003700:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	f993 3000 	ldrsb.w	r3, [r3]
 800370c:	461a      	mov	r2, r3
 800370e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	f383 0305 	usat	r3, #5, r3
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            sum += 0x1 << shift;
 8003724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003728:	2201      	movs	r2, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003730:	4413      	add	r3, r2
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < dim_vec; i++)
 8003734:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003738:	b29b      	uxth	r3, r3
 800373a:	3301      	adds	r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	867b      	strh	r3, [r7, #50]	; 0x32
 8003740:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	429a      	cmp	r2, r3
 8003748:	dbcf      	blt.n	80036ea <arm_softmax_q7+0x66>
        }
    }

    /* This is effectively (0x1 << 20) / sum */
    int output_base = 0x100000 / sum;
 800374a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	fb92 f3f3 	sdiv	r3, r2, r3
 8003754:	623b      	str	r3, [r7, #32]
    /* 
     * Final confidence will be output_base >> ( 13 - (vec_in[i] - base) )
     * so 128 (0x1<<7) -> 100% confidence when sum = 0x1 << 8, output_base = 0x1 << 12 
     * and vec_in[i]-base = 8
     */
    for (i = 0; i < dim_vec; i++) 
 8003756:	2300      	movs	r3, #0
 8003758:	867b      	strh	r3, [r7, #50]	; 0x32
 800375a:	e03a      	b.n	80037d2 <arm_softmax_q7+0x14e>
    {
        if (vec_in[i] > base) 
 800375c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	f993 3000 	ldrsb.w	r3, [r3]
 8003768:	b21b      	sxth	r3, r3
 800376a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800376e:	429a      	cmp	r2, r3
 8003770:	da23      	bge.n	80037ba <arm_softmax_q7+0x136>
        {
            /* Here minimum value of 13+base-vec_in[i] will be 5 */
            shift = (uint8_t)__USAT(13+base-vec_in[i], 5);
 8003772:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8003776:	330d      	adds	r3, #13
 8003778:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	440a      	add	r2, r1
 8003780:	f992 2000 	ldrsb.w	r2, [r2]
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f383 0305 	usat	r3, #5, r3
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            p_out[i] = (q7_t) __SSAT((output_base >> shift), 8);
 8003796:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037a2:	6a39      	ldr	r1, [r7, #32]
 80037a4:	fa41 f202 	asr.w	r2, r1, r2
 80037a8:	617a      	str	r2, [r7, #20]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	f302 0207 	ssat	r2, #8, r2
 80037b0:	613a      	str	r2, [r7, #16]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	b252      	sxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e005      	b.n	80037c6 <arm_softmax_q7+0x142>
        } else {
            p_out[i] = 0;
 80037ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++) 
 80037c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	867b      	strh	r3, [r7, #50]	; 0x32
 80037d2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	429a      	cmp	r2, r3
 80037da:	dbbf      	blt.n	800375c <arm_softmax_q7+0xd8>
        }
    }
}
 80037dc:	bf00      	nop
 80037de:	373c      	adds	r7, #60	; 0x3c
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <get_top_prediction>:
uint8_t image_buffer[28*28] = IMAGE_1;

q7_t output_data[10]; //10-classes

int get_top_prediction(q7_t* predictions)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  int max_ind = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
  int max_val = -128;
 80037f4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80037f8:	613b      	str	r3, [r7, #16]
  for(int i=0;i<10;i++) {
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e013      	b.n	8003828 <get_top_prediction+0x40>
    if(max_val < predictions[i]) {
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	f993 3000 	ldrsb.w	r3, [r3]
 800380a:	461a      	mov	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	dd07      	ble.n	8003822 <get_top_prediction+0x3a>
      max_val = predictions[i];
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	f993 3000 	ldrsb.w	r3, [r3]
 800381c:	613b      	str	r3, [r7, #16]
      max_ind = i;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	617b      	str	r3, [r7, #20]
  for(int i=0;i<10;i++) {
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3301      	adds	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b09      	cmp	r3, #9
 800382c:	dde8      	ble.n	8003800 <get_top_prediction+0x18>
    }
  }
  return max_ind;
 800382e:	697b      	ldr	r3, [r7, #20]
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <main>:

int main()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0

    run_nn((q7_t*)image_buffer, output_data);
 8003842:	491b      	ldr	r1, [pc, #108]	; (80038b0 <main+0x74>)
 8003844:	481b      	ldr	r0, [pc, #108]	; (80038b4 <main+0x78>)
 8003846:	f000 f86f 	bl	8003928 <run_nn>

    arm_softmax_q7(output_data,IP1_OUT_DIM,output_data);
 800384a:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <main+0x74>)
 800384c:	210a      	movs	r1, #10
 800384e:	4818      	ldr	r0, [pc, #96]	; (80038b0 <main+0x74>)
 8003850:	f7ff ff18 	bl	8003684 <arm_softmax_q7>

    int top_ind = get_top_prediction(output_data);
 8003854:	4816      	ldr	r0, [pc, #88]	; (80038b0 <main+0x74>)
 8003856:	f7ff ffc7 	bl	80037e8 <get_top_prediction>
 800385a:	6078      	str	r0, [r7, #4]

    int acc = (output_data[top_ind]*100)/127;
 800385c:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <main+0x74>)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	f993 3000 	ldrsb.w	r3, [r3]
 8003866:	461a      	mov	r2, r3
 8003868:	2364      	movs	r3, #100	; 0x64
 800386a:	fb03 f302 	mul.w	r3, r3, r2
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <main+0x7c>)
 8003870:	fb82 1203 	smull	r1, r2, r2, r3
 8003874:	441a      	add	r2, r3
 8003876:	1192      	asrs	r2, r2, #6
 8003878:	17db      	asrs	r3, r3, #31
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	603b      	str	r3, [r7, #0]
	lcd_init();
 800387e:	f7fc fdb5 	bl	80003ec <lcd_init>
	lcd_print("Digit: ");
 8003882:	480e      	ldr	r0, [pc, #56]	; (80038bc <main+0x80>)
 8003884:	f7fc fd96 	bl	80003b4 <lcd_print>
	lcd_send_integer(top_ind);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fc fde1 	bl	8000450 <lcd_send_integer>
	lcdCommand(0xC0);
 800388e:	20c0      	movs	r0, #192	; 0xc0
 8003890:	f7fc fd04 	bl	800029c <lcdCommand>
	lcd_print("Confidence: ");
 8003894:	480a      	ldr	r0, [pc, #40]	; (80038c0 <main+0x84>)
 8003896:	f7fc fd8d 	bl	80003b4 <lcd_print>
	lcd_send_integer(acc);
 800389a:	6838      	ldr	r0, [r7, #0]
 800389c:	f7fc fdd8 	bl	8000450 <lcd_send_integer>
	lcd_print("%");
 80038a0:	4808      	ldr	r0, [pc, #32]	; (80038c4 <main+0x88>)
 80038a2:	f7fc fd87 	bl	80003b4 <lcd_print>
 80038a6:	2300      	movs	r3, #0
		
  }
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20014cd8 	.word	0x20014cd8
 80038b4:	20000000 	.word	0x20000000
 80038b8:	81020409 	.word	0x81020409
 80038bc:	08004458 	.word	0x08004458
 80038c0:	08004460 	.word	0x08004460
 80038c4:	08004470 	.word	0x08004470

080038c8 <mean_subtract>:
//q7_t output_data[IP1_OUT_DIM];

q7_t col_buffer[6400];
q7_t scratch_buffer[31360];

void mean_subtract(q7_t* image_data) {
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  for(int i=0; i<DATA_OUT_CH*DATA_OUT_DIM*DATA_OUT_DIM; i++) {
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e01b      	b.n	800390e <mean_subtract+0x46>
    image_data[i] = (q7_t)__SSAT( ((int)(image_data[i] - mean[i]) >> DATA_RSHIFT), 8);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	440a      	add	r2, r1
 80038e2:	f992 2000 	ldrsb.w	r2, [r2]
 80038e6:	4610      	mov	r0, r2
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <mean_subtract+0x5c>)
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	440a      	add	r2, r1
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	1a82      	subs	r2, r0, r2
 80038f2:	f04f 31ff 	mov.w	r1, #4294967295
 80038f6:	410a      	asrs	r2, r1
 80038f8:	613a      	str	r2, [r7, #16]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	f302 0207 	ssat	r2, #8, r2
 8003900:	60fa      	str	r2, [r7, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	b252      	sxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<DATA_OUT_CH*DATA_OUT_DIM*DATA_OUT_DIM; i++) {
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3301      	adds	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003914:	dbdf      	blt.n	80038d6 <mean_subtract+0xe>
  }
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20000310 	.word	0x20000310

08003928 <run_nn>:

void run_nn(q7_t* input_data, q7_t* output_data) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b090      	sub	sp, #64	; 0x40
 800392c:	af0c      	add	r7, sp, #48	; 0x30
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  q7_t* buffer1 = scratch_buffer;
 8003932:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <run_nn+0x16c>)
 8003934:	60fb      	str	r3, [r7, #12]
  q7_t* buffer2 = buffer1 + 25088;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 800393c:	60bb      	str	r3, [r7, #8]
  mean_subtract(input_data);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffc2 	bl	80038c8 <mean_subtract>
  arm_convolve_HWC_q7_basic(input_data, CONV1_IN_DIM, CONV1_IN_CH, conv1_wt, CONV1_OUT_CH, CONV1_KER_DIM, CONV1_PAD, CONV1_STRIDE, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_DIM, (q15_t*)col_buffer, NULL);
 8003944:	2300      	movs	r3, #0
 8003946:	930a      	str	r3, [sp, #40]	; 0x28
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <run_nn+0x170>)
 800394a:	9309      	str	r3, [sp, #36]	; 0x24
 800394c:	231c      	movs	r3, #28
 800394e:	9308      	str	r3, [sp, #32]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	9307      	str	r3, [sp, #28]
 8003954:	2309      	movs	r3, #9
 8003956:	9306      	str	r3, [sp, #24]
 8003958:	2300      	movs	r3, #0
 800395a:	9305      	str	r3, [sp, #20]
 800395c:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <run_nn+0x174>)
 800395e:	9304      	str	r3, [sp, #16]
 8003960:	2301      	movs	r3, #1
 8003962:	9303      	str	r3, [sp, #12]
 8003964:	2302      	movs	r3, #2
 8003966:	9302      	str	r3, [sp, #8]
 8003968:	2305      	movs	r3, #5
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	2320      	movs	r3, #32
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4b4b      	ldr	r3, [pc, #300]	; (8003aa0 <run_nn+0x178>)
 8003972:	2201      	movs	r2, #1
 8003974:	211c      	movs	r1, #28
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fc fd88 	bl	800048c <arm_convolve_HWC_q7_basic>
  arm_maxpool_q7_HWC(buffer1, POOL1_IN_DIM, POOL1_IN_CH, POOL1_KER_DIM, POOL1_PAD, POOL1_STRIDE, POOL1_OUT_DIM, col_buffer, buffer2);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	4b45      	ldr	r3, [pc, #276]	; (8003a98 <run_nn+0x170>)
 8003982:	9303      	str	r3, [sp, #12]
 8003984:	230e      	movs	r3, #14
 8003986:	9302      	str	r3, [sp, #8]
 8003988:	2302      	movs	r3, #2
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	2300      	movs	r3, #0
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2303      	movs	r3, #3
 8003992:	2220      	movs	r2, #32
 8003994:	211c      	movs	r1, #28
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff faa0 	bl	8002edc <arm_maxpool_q7_HWC>
  arm_relu_q7(buffer2, RELU1_OUT_DIM*RELU1_OUT_DIM*RELU1_OUT_CH);
 800399c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80039a0:	68b8      	ldr	r0, [r7, #8]
 80039a2:	f7ff fe0f 	bl	80035c4 <arm_relu_q7>
  arm_convolve_HWC_q7_fast(buffer2, CONV2_IN_DIM, CONV2_IN_CH, conv2_wt, CONV2_OUT_CH, CONV2_KER_DIM, CONV2_PAD, CONV2_STRIDE, conv2_bias, CONV2_BIAS_LSHIFT, CONV2_OUT_RSHIFT, buffer1, CONV2_OUT_DIM, (q15_t*)col_buffer, NULL);
 80039a6:	2300      	movs	r3, #0
 80039a8:	930a      	str	r3, [sp, #40]	; 0x28
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <run_nn+0x170>)
 80039ac:	9309      	str	r3, [sp, #36]	; 0x24
 80039ae:	230e      	movs	r3, #14
 80039b0:	9308      	str	r3, [sp, #32]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	9307      	str	r3, [sp, #28]
 80039b6:	230a      	movs	r3, #10
 80039b8:	9306      	str	r3, [sp, #24]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9305      	str	r3, [sp, #20]
 80039be:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <run_nn+0x17c>)
 80039c0:	9304      	str	r3, [sp, #16]
 80039c2:	2301      	movs	r3, #1
 80039c4:	9303      	str	r3, [sp, #12]
 80039c6:	2302      	movs	r3, #2
 80039c8:	9302      	str	r3, [sp, #8]
 80039ca:	2305      	movs	r3, #5
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	2320      	movs	r3, #32
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <run_nn+0x180>)
 80039d4:	2220      	movs	r2, #32
 80039d6:	210e      	movs	r1, #14
 80039d8:	68b8      	ldr	r0, [r7, #8]
 80039da:	f7fc ff48 	bl	800086e <arm_convolve_HWC_q7_fast>
  arm_relu_q7(buffer1, RELU2_OUT_DIM*RELU2_OUT_DIM*RELU2_OUT_CH);
 80039de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7ff fdee 	bl	80035c4 <arm_relu_q7>
  arm_avepool_q7_HWC(buffer1, POOL2_IN_DIM, POOL2_IN_CH, POOL2_KER_DIM, POOL2_PAD, POOL2_STRIDE, POOL2_OUT_DIM, col_buffer, buffer2);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	9304      	str	r3, [sp, #16]
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <run_nn+0x170>)
 80039ee:	9303      	str	r3, [sp, #12]
 80039f0:	2307      	movs	r3, #7
 80039f2:	9302      	str	r3, [sp, #8]
 80039f4:	2302      	movs	r3, #2
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	2300      	movs	r3, #0
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2303      	movs	r3, #3
 80039fe:	2220      	movs	r2, #32
 8003a00:	210e      	movs	r1, #14
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff fba1 	bl	800314a <arm_avepool_q7_HWC>
  arm_convolve_HWC_q7_basic(buffer2, CONV3_IN_DIM, CONV3_IN_CH, conv3_wt, CONV3_OUT_CH, CONV3_KER_DIM, CONV3_PAD, CONV3_STRIDE, conv3_bias, CONV3_BIAS_LSHIFT, CONV3_OUT_RSHIFT, buffer1, CONV3_OUT_DIM, (q15_t*)col_buffer, NULL);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <run_nn+0x170>)
 8003a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a10:	2307      	movs	r3, #7
 8003a12:	9308      	str	r3, [sp, #32]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	9307      	str	r3, [sp, #28]
 8003a18:	2307      	movs	r3, #7
 8003a1a:	9306      	str	r3, [sp, #24]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9305      	str	r3, [sp, #20]
 8003a20:	4b22      	ldr	r3, [pc, #136]	; (8003aac <run_nn+0x184>)
 8003a22:	9304      	str	r3, [sp, #16]
 8003a24:	2301      	movs	r3, #1
 8003a26:	9303      	str	r3, [sp, #12]
 8003a28:	2302      	movs	r3, #2
 8003a2a:	9302      	str	r3, [sp, #8]
 8003a2c:	2305      	movs	r3, #5
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	2340      	movs	r3, #64	; 0x40
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <run_nn+0x188>)
 8003a36:	2220      	movs	r2, #32
 8003a38:	2107      	movs	r1, #7
 8003a3a:	68b8      	ldr	r0, [r7, #8]
 8003a3c:	f7fc fd26 	bl	800048c <arm_convolve_HWC_q7_basic>
  arm_relu_q7(buffer1, RELU3_OUT_DIM*RELU3_OUT_DIM*RELU3_OUT_CH);
 8003a40:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff fdbd 	bl	80035c4 <arm_relu_q7>
  arm_avepool_q7_HWC(buffer1, POOL3_IN_DIM, POOL3_IN_CH, POOL3_KER_DIM, POOL3_PAD, POOL3_STRIDE, POOL3_OUT_DIM, col_buffer, buffer2);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <run_nn+0x170>)
 8003a50:	9303      	str	r3, [sp, #12]
 8003a52:	2303      	movs	r3, #3
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	2302      	movs	r3, #2
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2303      	movs	r3, #3
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	2107      	movs	r1, #7
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff fb70 	bl	800314a <arm_avepool_q7_HWC>
  arm_fully_connected_q7_opt(buffer2, ip1_wt, IP1_IN_DIM, IP1_OUT_DIM, IP1_BIAS_LSHIFT, IP1_OUT_RSHIFT, ip1_bias, output_data, (q15_t*)col_buffer);
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <run_nn+0x170>)
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <run_nn+0x18c>)
 8003a74:	9302      	str	r3, [sp, #8]
 8003a76:	2304      	movs	r3, #4
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	230a      	movs	r3, #10
 8003a80:	f44f 7210 	mov.w	r2, #576	; 0x240
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <run_nn+0x190>)
 8003a86:	68b8      	ldr	r0, [r7, #8]
 8003a88:	f7fd fbdf 	bl	800124a <arm_fully_connected_q7_opt>
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	200165e4 	.word	0x200165e4
 8003a98:	20014ce4 	.word	0x20014ce4
 8003a9c:	20000940 	.word	0x20000940
 8003aa0:	20000620 	.word	0x20000620
 8003aa4:	20014c6c 	.word	0x20014c6c
 8003aa8:	20000960 	.word	0x20000960
 8003aac:	20014c8c 	.word	0x20014c8c
 8003ab0:	20006d60 	.word	0x20006d60
 8003ab4:	20014be0 	.word	0x20014be0
 8003ab8:	20013560 	.word	0x20013560

08003abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ac2:	e003      	b.n	8003acc <LoopCopyDataInit>

08003ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003aca:	3104      	adds	r1, #4

08003acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ad4:	d3f6      	bcc.n	8003ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ad8:	e002      	b.n	8003ae0 <LoopFillZerobss>

08003ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003adc:	f842 3b04 	str.w	r3, [r2], #4

08003ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ae4:	d3f9      	bcc.n	8003ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ae6:	f000 f813 	bl	8003b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aea:	f000 f847 	bl	8003b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aee:	f7ff fea5 	bl	800383c <main>
  bx  lr    
 8003af2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003af4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003af8:	080044b0 	.word	0x080044b0
  ldr  r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b00:	20014c50 	.word	0x20014c50
  ldr  r2, =_sbss
 8003b04:	20014c50 	.word	0x20014c50
  ldr  r3, = _ebss
 8003b08:	2001e068 	.word	0x2001e068

08003b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b0c:	e7fe      	b.n	8003b0c <ADC_IRQHandler>
	...

08003b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b14:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <SystemInit+0x60>)
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <SystemInit+0x60>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <SystemInit+0x64>)
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <SystemInit+0x64>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <SystemInit+0x64>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <SystemInit+0x64>)
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <SystemInit+0x64>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <SystemInit+0x64>)
 8003b48:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <SystemInit+0x68>)
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b4c:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <SystemInit+0x64>)
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <SystemInit+0x64>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <SystemInit+0x64>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <SystemInit+0x60>)
 8003b60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b64:	609a      	str	r2, [r3, #8]
#endif
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00
 8003b74:	40023800 	.word	0x40023800
 8003b78:	24003010 	.word	0x24003010

08003b7c <__libc_init_array>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	4e0d      	ldr	r6, [pc, #52]	; (8003bb4 <__libc_init_array+0x38>)
 8003b80:	4c0d      	ldr	r4, [pc, #52]	; (8003bb8 <__libc_init_array+0x3c>)
 8003b82:	1ba4      	subs	r4, r4, r6
 8003b84:	10a4      	asrs	r4, r4, #2
 8003b86:	2500      	movs	r5, #0
 8003b88:	42a5      	cmp	r5, r4
 8003b8a:	d109      	bne.n	8003ba0 <__libc_init_array+0x24>
 8003b8c:	4e0b      	ldr	r6, [pc, #44]	; (8003bbc <__libc_init_array+0x40>)
 8003b8e:	4c0c      	ldr	r4, [pc, #48]	; (8003bc0 <__libc_init_array+0x44>)
 8003b90:	f000 fc4c 	bl	800442c <_init>
 8003b94:	1ba4      	subs	r4, r4, r6
 8003b96:	10a4      	asrs	r4, r4, #2
 8003b98:	2500      	movs	r5, #0
 8003b9a:	42a5      	cmp	r5, r4
 8003b9c:	d105      	bne.n	8003baa <__libc_init_array+0x2e>
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba4:	4798      	blx	r3
 8003ba6:	3501      	adds	r5, #1
 8003ba8:	e7ee      	b.n	8003b88 <__libc_init_array+0xc>
 8003baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bae:	4798      	blx	r3
 8003bb0:	3501      	adds	r5, #1
 8003bb2:	e7f2      	b.n	8003b9a <__libc_init_array+0x1e>
 8003bb4:	080044a8 	.word	0x080044a8
 8003bb8:	080044a8 	.word	0x080044a8
 8003bbc:	080044a8 	.word	0x080044a8
 8003bc0:	080044ac 	.word	0x080044ac

08003bc4 <memcpy>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	1e43      	subs	r3, r0, #1
 8003bc8:	440a      	add	r2, r1
 8003bca:	4291      	cmp	r1, r2
 8003bcc:	d100      	bne.n	8003bd0 <memcpy+0xc>
 8003bce:	bd10      	pop	{r4, pc}
 8003bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bd8:	e7f7      	b.n	8003bca <memcpy+0x6>

08003bda <memmove>:
 8003bda:	4288      	cmp	r0, r1
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	eb01 0302 	add.w	r3, r1, r2
 8003be2:	d803      	bhi.n	8003bec <memmove+0x12>
 8003be4:	1e42      	subs	r2, r0, #1
 8003be6:	4299      	cmp	r1, r3
 8003be8:	d10c      	bne.n	8003c04 <memmove+0x2a>
 8003bea:	bd10      	pop	{r4, pc}
 8003bec:	4298      	cmp	r0, r3
 8003bee:	d2f9      	bcs.n	8003be4 <memmove+0xa>
 8003bf0:	1881      	adds	r1, r0, r2
 8003bf2:	1ad2      	subs	r2, r2, r3
 8003bf4:	42d3      	cmn	r3, r2
 8003bf6:	d100      	bne.n	8003bfa <memmove+0x20>
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bfe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c02:	e7f7      	b.n	8003bf4 <memmove+0x1a>
 8003c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c0c:	e7eb      	b.n	8003be6 <memmove+0xc>

08003c0e <memset>:
 8003c0e:	4402      	add	r2, r0
 8003c10:	4603      	mov	r3, r0
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d100      	bne.n	8003c18 <memset+0xa>
 8003c16:	4770      	bx	lr
 8003c18:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1c:	e7f9      	b.n	8003c12 <memset+0x4>
	...

08003c20 <siprintf>:
 8003c20:	b40e      	push	{r1, r2, r3}
 8003c22:	b500      	push	{lr}
 8003c24:	b09c      	sub	sp, #112	; 0x70
 8003c26:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c2c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003c30:	9002      	str	r0, [sp, #8]
 8003c32:	9006      	str	r0, [sp, #24]
 8003c34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c38:	480a      	ldr	r0, [pc, #40]	; (8003c64 <siprintf+0x44>)
 8003c3a:	9104      	str	r1, [sp, #16]
 8003c3c:	9107      	str	r1, [sp, #28]
 8003c3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c46:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003c4a:	6800      	ldr	r0, [r0, #0]
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	a902      	add	r1, sp, #8
 8003c50:	f000 f866 	bl	8003d20 <_svfiprintf_r>
 8003c54:	9b02      	ldr	r3, [sp, #8]
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	b01c      	add	sp, #112	; 0x70
 8003c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c60:	b003      	add	sp, #12
 8003c62:	4770      	bx	lr
 8003c64:	20014bec 	.word	0x20014bec

08003c68 <__ssputs_r>:
 8003c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	688e      	ldr	r6, [r1, #8]
 8003c6e:	429e      	cmp	r6, r3
 8003c70:	4682      	mov	sl, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	4691      	mov	r9, r2
 8003c76:	4698      	mov	r8, r3
 8003c78:	d835      	bhi.n	8003ce6 <__ssputs_r+0x7e>
 8003c7a:	898a      	ldrh	r2, [r1, #12]
 8003c7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c80:	d031      	beq.n	8003ce6 <__ssputs_r+0x7e>
 8003c82:	6825      	ldr	r5, [r4, #0]
 8003c84:	6909      	ldr	r1, [r1, #16]
 8003c86:	1a6f      	subs	r7, r5, r1
 8003c88:	6965      	ldr	r5, [r4, #20]
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c90:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c94:	f108 0301 	add.w	r3, r8, #1
 8003c98:	443b      	add	r3, r7
 8003c9a:	429d      	cmp	r5, r3
 8003c9c:	bf38      	it	cc
 8003c9e:	461d      	movcc	r5, r3
 8003ca0:	0553      	lsls	r3, r2, #21
 8003ca2:	d531      	bpl.n	8003d08 <__ssputs_r+0xa0>
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f000 fb13 	bl	80042d0 <_malloc_r>
 8003caa:	4606      	mov	r6, r0
 8003cac:	b950      	cbnz	r0, 8003cc4 <__ssputs_r+0x5c>
 8003cae:	230c      	movs	r3, #12
 8003cb0:	f8ca 3000 	str.w	r3, [sl]
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cba:	81a3      	strh	r3, [r4, #12]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc4:	463a      	mov	r2, r7
 8003cc6:	6921      	ldr	r1, [r4, #16]
 8003cc8:	f7ff ff7c 	bl	8003bc4 <memcpy>
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd6:	81a3      	strh	r3, [r4, #12]
 8003cd8:	6126      	str	r6, [r4, #16]
 8003cda:	6165      	str	r5, [r4, #20]
 8003cdc:	443e      	add	r6, r7
 8003cde:	1bed      	subs	r5, r5, r7
 8003ce0:	6026      	str	r6, [r4, #0]
 8003ce2:	60a5      	str	r5, [r4, #8]
 8003ce4:	4646      	mov	r6, r8
 8003ce6:	4546      	cmp	r6, r8
 8003ce8:	bf28      	it	cs
 8003cea:	4646      	movcs	r6, r8
 8003cec:	4632      	mov	r2, r6
 8003cee:	4649      	mov	r1, r9
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	f7ff ff72 	bl	8003bda <memmove>
 8003cf6:	68a3      	ldr	r3, [r4, #8]
 8003cf8:	1b9b      	subs	r3, r3, r6
 8003cfa:	60a3      	str	r3, [r4, #8]
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	441e      	add	r6, r3
 8003d00:	6026      	str	r6, [r4, #0]
 8003d02:	2000      	movs	r0, #0
 8003d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d08:	462a      	mov	r2, r5
 8003d0a:	f000 fb3f 	bl	800438c <_realloc_r>
 8003d0e:	4606      	mov	r6, r0
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d1e1      	bne.n	8003cd8 <__ssputs_r+0x70>
 8003d14:	6921      	ldr	r1, [r4, #16]
 8003d16:	4650      	mov	r0, sl
 8003d18:	f000 fa8c 	bl	8004234 <_free_r>
 8003d1c:	e7c7      	b.n	8003cae <__ssputs_r+0x46>
	...

08003d20 <_svfiprintf_r>:
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	b09d      	sub	sp, #116	; 0x74
 8003d26:	4680      	mov	r8, r0
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	898b      	ldrh	r3, [r1, #12]
 8003d2c:	061c      	lsls	r4, r3, #24
 8003d2e:	460d      	mov	r5, r1
 8003d30:	4616      	mov	r6, r2
 8003d32:	d50f      	bpl.n	8003d54 <_svfiprintf_r+0x34>
 8003d34:	690b      	ldr	r3, [r1, #16]
 8003d36:	b96b      	cbnz	r3, 8003d54 <_svfiprintf_r+0x34>
 8003d38:	2140      	movs	r1, #64	; 0x40
 8003d3a:	f000 fac9 	bl	80042d0 <_malloc_r>
 8003d3e:	6028      	str	r0, [r5, #0]
 8003d40:	6128      	str	r0, [r5, #16]
 8003d42:	b928      	cbnz	r0, 8003d50 <_svfiprintf_r+0x30>
 8003d44:	230c      	movs	r3, #12
 8003d46:	f8c8 3000 	str.w	r3, [r8]
 8003d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4e:	e0c5      	b.n	8003edc <_svfiprintf_r+0x1bc>
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	616b      	str	r3, [r5, #20]
 8003d54:	2300      	movs	r3, #0
 8003d56:	9309      	str	r3, [sp, #36]	; 0x24
 8003d58:	2320      	movs	r3, #32
 8003d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d5e:	2330      	movs	r3, #48	; 0x30
 8003d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d64:	f04f 0b01 	mov.w	fp, #1
 8003d68:	4637      	mov	r7, r6
 8003d6a:	463c      	mov	r4, r7
 8003d6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d13c      	bne.n	8003dee <_svfiprintf_r+0xce>
 8003d74:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d78:	d00b      	beq.n	8003d92 <_svfiprintf_r+0x72>
 8003d7a:	4653      	mov	r3, sl
 8003d7c:	4632      	mov	r2, r6
 8003d7e:	4629      	mov	r1, r5
 8003d80:	4640      	mov	r0, r8
 8003d82:	f7ff ff71 	bl	8003c68 <__ssputs_r>
 8003d86:	3001      	adds	r0, #1
 8003d88:	f000 80a3 	beq.w	8003ed2 <_svfiprintf_r+0x1b2>
 8003d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d8e:	4453      	add	r3, sl
 8003d90:	9309      	str	r3, [sp, #36]	; 0x24
 8003d92:	783b      	ldrb	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 809c 	beq.w	8003ed2 <_svfiprintf_r+0x1b2>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003da0:	9304      	str	r3, [sp, #16]
 8003da2:	9307      	str	r3, [sp, #28]
 8003da4:	9205      	str	r2, [sp, #20]
 8003da6:	9306      	str	r3, [sp, #24]
 8003da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dac:	931a      	str	r3, [sp, #104]	; 0x68
 8003dae:	2205      	movs	r2, #5
 8003db0:	7821      	ldrb	r1, [r4, #0]
 8003db2:	4850      	ldr	r0, [pc, #320]	; (8003ef4 <_svfiprintf_r+0x1d4>)
 8003db4:	f7fc fa0c 	bl	80001d0 <memchr>
 8003db8:	1c67      	adds	r7, r4, #1
 8003dba:	9b04      	ldr	r3, [sp, #16]
 8003dbc:	b9d8      	cbnz	r0, 8003df6 <_svfiprintf_r+0xd6>
 8003dbe:	06d9      	lsls	r1, r3, #27
 8003dc0:	bf44      	itt	mi
 8003dc2:	2220      	movmi	r2, #32
 8003dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dc8:	071a      	lsls	r2, r3, #28
 8003dca:	bf44      	itt	mi
 8003dcc:	222b      	movmi	r2, #43	; 0x2b
 8003dce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dd2:	7822      	ldrb	r2, [r4, #0]
 8003dd4:	2a2a      	cmp	r2, #42	; 0x2a
 8003dd6:	d016      	beq.n	8003e06 <_svfiprintf_r+0xe6>
 8003dd8:	9a07      	ldr	r2, [sp, #28]
 8003dda:	2100      	movs	r1, #0
 8003ddc:	200a      	movs	r0, #10
 8003dde:	4627      	mov	r7, r4
 8003de0:	3401      	adds	r4, #1
 8003de2:	783b      	ldrb	r3, [r7, #0]
 8003de4:	3b30      	subs	r3, #48	; 0x30
 8003de6:	2b09      	cmp	r3, #9
 8003de8:	d951      	bls.n	8003e8e <_svfiprintf_r+0x16e>
 8003dea:	b1c9      	cbz	r1, 8003e20 <_svfiprintf_r+0x100>
 8003dec:	e011      	b.n	8003e12 <_svfiprintf_r+0xf2>
 8003dee:	2b25      	cmp	r3, #37	; 0x25
 8003df0:	d0c0      	beq.n	8003d74 <_svfiprintf_r+0x54>
 8003df2:	4627      	mov	r7, r4
 8003df4:	e7b9      	b.n	8003d6a <_svfiprintf_r+0x4a>
 8003df6:	4a3f      	ldr	r2, [pc, #252]	; (8003ef4 <_svfiprintf_r+0x1d4>)
 8003df8:	1a80      	subs	r0, r0, r2
 8003dfa:	fa0b f000 	lsl.w	r0, fp, r0
 8003dfe:	4318      	orrs	r0, r3
 8003e00:	9004      	str	r0, [sp, #16]
 8003e02:	463c      	mov	r4, r7
 8003e04:	e7d3      	b.n	8003dae <_svfiprintf_r+0x8e>
 8003e06:	9a03      	ldr	r2, [sp, #12]
 8003e08:	1d11      	adds	r1, r2, #4
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	9103      	str	r1, [sp, #12]
 8003e0e:	2a00      	cmp	r2, #0
 8003e10:	db01      	blt.n	8003e16 <_svfiprintf_r+0xf6>
 8003e12:	9207      	str	r2, [sp, #28]
 8003e14:	e004      	b.n	8003e20 <_svfiprintf_r+0x100>
 8003e16:	4252      	negs	r2, r2
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	9207      	str	r2, [sp, #28]
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	783b      	ldrb	r3, [r7, #0]
 8003e22:	2b2e      	cmp	r3, #46	; 0x2e
 8003e24:	d10e      	bne.n	8003e44 <_svfiprintf_r+0x124>
 8003e26:	787b      	ldrb	r3, [r7, #1]
 8003e28:	2b2a      	cmp	r3, #42	; 0x2a
 8003e2a:	f107 0101 	add.w	r1, r7, #1
 8003e2e:	d132      	bne.n	8003e96 <_svfiprintf_r+0x176>
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	1d1a      	adds	r2, r3, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	9203      	str	r2, [sp, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bfb8      	it	lt
 8003e3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e40:	3702      	adds	r7, #2
 8003e42:	9305      	str	r3, [sp, #20]
 8003e44:	4c2c      	ldr	r4, [pc, #176]	; (8003ef8 <_svfiprintf_r+0x1d8>)
 8003e46:	7839      	ldrb	r1, [r7, #0]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7fc f9c0 	bl	80001d0 <memchr>
 8003e50:	b138      	cbz	r0, 8003e62 <_svfiprintf_r+0x142>
 8003e52:	2340      	movs	r3, #64	; 0x40
 8003e54:	1b00      	subs	r0, r0, r4
 8003e56:	fa03 f000 	lsl.w	r0, r3, r0
 8003e5a:	9b04      	ldr	r3, [sp, #16]
 8003e5c:	4303      	orrs	r3, r0
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	3701      	adds	r7, #1
 8003e62:	7839      	ldrb	r1, [r7, #0]
 8003e64:	4825      	ldr	r0, [pc, #148]	; (8003efc <_svfiprintf_r+0x1dc>)
 8003e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e6a:	2206      	movs	r2, #6
 8003e6c:	1c7e      	adds	r6, r7, #1
 8003e6e:	f7fc f9af 	bl	80001d0 <memchr>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d035      	beq.n	8003ee2 <_svfiprintf_r+0x1c2>
 8003e76:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <_svfiprintf_r+0x1e0>)
 8003e78:	b9fb      	cbnz	r3, 8003eba <_svfiprintf_r+0x19a>
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	3308      	adds	r3, #8
 8003e84:	9303      	str	r3, [sp, #12]
 8003e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e88:	444b      	add	r3, r9
 8003e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8c:	e76c      	b.n	8003d68 <_svfiprintf_r+0x48>
 8003e8e:	fb00 3202 	mla	r2, r0, r2, r3
 8003e92:	2101      	movs	r1, #1
 8003e94:	e7a3      	b.n	8003dde <_svfiprintf_r+0xbe>
 8003e96:	2300      	movs	r3, #0
 8003e98:	9305      	str	r3, [sp, #20]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	240a      	movs	r4, #10
 8003e9e:	460f      	mov	r7, r1
 8003ea0:	3101      	adds	r1, #1
 8003ea2:	783a      	ldrb	r2, [r7, #0]
 8003ea4:	3a30      	subs	r2, #48	; 0x30
 8003ea6:	2a09      	cmp	r2, #9
 8003ea8:	d903      	bls.n	8003eb2 <_svfiprintf_r+0x192>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ca      	beq.n	8003e44 <_svfiprintf_r+0x124>
 8003eae:	9005      	str	r0, [sp, #20]
 8003eb0:	e7c8      	b.n	8003e44 <_svfiprintf_r+0x124>
 8003eb2:	fb04 2000 	mla	r0, r4, r0, r2
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e7f1      	b.n	8003e9e <_svfiprintf_r+0x17e>
 8003eba:	ab03      	add	r3, sp, #12
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	462a      	mov	r2, r5
 8003ec0:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <_svfiprintf_r+0x1e4>)
 8003ec2:	a904      	add	r1, sp, #16
 8003ec4:	4640      	mov	r0, r8
 8003ec6:	f3af 8000 	nop.w
 8003eca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ece:	4681      	mov	r9, r0
 8003ed0:	d1d9      	bne.n	8003e86 <_svfiprintf_r+0x166>
 8003ed2:	89ab      	ldrh	r3, [r5, #12]
 8003ed4:	065b      	lsls	r3, r3, #25
 8003ed6:	f53f af38 	bmi.w	8003d4a <_svfiprintf_r+0x2a>
 8003eda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003edc:	b01d      	add	sp, #116	; 0x74
 8003ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee2:	ab03      	add	r3, sp, #12
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	462a      	mov	r2, r5
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <_svfiprintf_r+0x1e4>)
 8003eea:	a904      	add	r1, sp, #16
 8003eec:	4640      	mov	r0, r8
 8003eee:	f000 f881 	bl	8003ff4 <_printf_i>
 8003ef2:	e7ea      	b.n	8003eca <_svfiprintf_r+0x1aa>
 8003ef4:	08004472 	.word	0x08004472
 8003ef8:	08004478 	.word	0x08004478
 8003efc:	0800447c 	.word	0x0800447c
 8003f00:	00000000 	.word	0x00000000
 8003f04:	08003c69 	.word	0x08003c69

08003f08 <_printf_common>:
 8003f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0c:	4691      	mov	r9, r2
 8003f0e:	461f      	mov	r7, r3
 8003f10:	688a      	ldr	r2, [r1, #8]
 8003f12:	690b      	ldr	r3, [r1, #16]
 8003f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	bfb8      	it	lt
 8003f1c:	4613      	movlt	r3, r2
 8003f1e:	f8c9 3000 	str.w	r3, [r9]
 8003f22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f26:	4606      	mov	r6, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	b112      	cbz	r2, 8003f32 <_printf_common+0x2a>
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f8c9 3000 	str.w	r3, [r9]
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	0699      	lsls	r1, r3, #26
 8003f36:	bf42      	ittt	mi
 8003f38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f3c:	3302      	addmi	r3, #2
 8003f3e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f42:	6825      	ldr	r5, [r4, #0]
 8003f44:	f015 0506 	ands.w	r5, r5, #6
 8003f48:	d107      	bne.n	8003f5a <_printf_common+0x52>
 8003f4a:	f104 0a19 	add.w	sl, r4, #25
 8003f4e:	68e3      	ldr	r3, [r4, #12]
 8003f50:	f8d9 2000 	ldr.w	r2, [r9]
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	429d      	cmp	r5, r3
 8003f58:	db29      	blt.n	8003fae <_printf_common+0xa6>
 8003f5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	3300      	adds	r3, #0
 8003f62:	bf18      	it	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	0692      	lsls	r2, r2, #26
 8003f68:	d42e      	bmi.n	8003fc8 <_printf_common+0xc0>
 8003f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f6e:	4639      	mov	r1, r7
 8003f70:	4630      	mov	r0, r6
 8003f72:	47c0      	blx	r8
 8003f74:	3001      	adds	r0, #1
 8003f76:	d021      	beq.n	8003fbc <_printf_common+0xb4>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	68e5      	ldr	r5, [r4, #12]
 8003f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8003f80:	f003 0306 	and.w	r3, r3, #6
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	bf08      	it	eq
 8003f88:	1aad      	subeq	r5, r5, r2
 8003f8a:	68a3      	ldr	r3, [r4, #8]
 8003f8c:	6922      	ldr	r2, [r4, #16]
 8003f8e:	bf0c      	ite	eq
 8003f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f94:	2500      	movne	r5, #0
 8003f96:	4293      	cmp	r3, r2
 8003f98:	bfc4      	itt	gt
 8003f9a:	1a9b      	subgt	r3, r3, r2
 8003f9c:	18ed      	addgt	r5, r5, r3
 8003f9e:	f04f 0900 	mov.w	r9, #0
 8003fa2:	341a      	adds	r4, #26
 8003fa4:	454d      	cmp	r5, r9
 8003fa6:	d11b      	bne.n	8003fe0 <_printf_common+0xd8>
 8003fa8:	2000      	movs	r0, #0
 8003faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fae:	2301      	movs	r3, #1
 8003fb0:	4652      	mov	r2, sl
 8003fb2:	4639      	mov	r1, r7
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	47c0      	blx	r8
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d103      	bne.n	8003fc4 <_printf_common+0xbc>
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc4:	3501      	adds	r5, #1
 8003fc6:	e7c2      	b.n	8003f4e <_printf_common+0x46>
 8003fc8:	18e1      	adds	r1, r4, r3
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	2030      	movs	r0, #48	; 0x30
 8003fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fd2:	4422      	add	r2, r4
 8003fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fdc:	3302      	adds	r3, #2
 8003fde:	e7c4      	b.n	8003f6a <_printf_common+0x62>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	4639      	mov	r1, r7
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	47c0      	blx	r8
 8003fea:	3001      	adds	r0, #1
 8003fec:	d0e6      	beq.n	8003fbc <_printf_common+0xb4>
 8003fee:	f109 0901 	add.w	r9, r9, #1
 8003ff2:	e7d7      	b.n	8003fa4 <_printf_common+0x9c>

08003ff4 <_printf_i>:
 8003ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ff8:	4617      	mov	r7, r2
 8003ffa:	7e0a      	ldrb	r2, [r1, #24]
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	2a6e      	cmp	r2, #110	; 0x6e
 8004000:	4698      	mov	r8, r3
 8004002:	4606      	mov	r6, r0
 8004004:	460c      	mov	r4, r1
 8004006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004008:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800400c:	f000 80bc 	beq.w	8004188 <_printf_i+0x194>
 8004010:	d81a      	bhi.n	8004048 <_printf_i+0x54>
 8004012:	2a63      	cmp	r2, #99	; 0x63
 8004014:	d02e      	beq.n	8004074 <_printf_i+0x80>
 8004016:	d80a      	bhi.n	800402e <_printf_i+0x3a>
 8004018:	2a00      	cmp	r2, #0
 800401a:	f000 80c8 	beq.w	80041ae <_printf_i+0x1ba>
 800401e:	2a58      	cmp	r2, #88	; 0x58
 8004020:	f000 808a 	beq.w	8004138 <_printf_i+0x144>
 8004024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004028:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800402c:	e02a      	b.n	8004084 <_printf_i+0x90>
 800402e:	2a64      	cmp	r2, #100	; 0x64
 8004030:	d001      	beq.n	8004036 <_printf_i+0x42>
 8004032:	2a69      	cmp	r2, #105	; 0x69
 8004034:	d1f6      	bne.n	8004024 <_printf_i+0x30>
 8004036:	6821      	ldr	r1, [r4, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800403e:	d023      	beq.n	8004088 <_printf_i+0x94>
 8004040:	1d11      	adds	r1, r2, #4
 8004042:	6019      	str	r1, [r3, #0]
 8004044:	6813      	ldr	r3, [r2, #0]
 8004046:	e027      	b.n	8004098 <_printf_i+0xa4>
 8004048:	2a73      	cmp	r2, #115	; 0x73
 800404a:	f000 80b4 	beq.w	80041b6 <_printf_i+0x1c2>
 800404e:	d808      	bhi.n	8004062 <_printf_i+0x6e>
 8004050:	2a6f      	cmp	r2, #111	; 0x6f
 8004052:	d02a      	beq.n	80040aa <_printf_i+0xb6>
 8004054:	2a70      	cmp	r2, #112	; 0x70
 8004056:	d1e5      	bne.n	8004024 <_printf_i+0x30>
 8004058:	680a      	ldr	r2, [r1, #0]
 800405a:	f042 0220 	orr.w	r2, r2, #32
 800405e:	600a      	str	r2, [r1, #0]
 8004060:	e003      	b.n	800406a <_printf_i+0x76>
 8004062:	2a75      	cmp	r2, #117	; 0x75
 8004064:	d021      	beq.n	80040aa <_printf_i+0xb6>
 8004066:	2a78      	cmp	r2, #120	; 0x78
 8004068:	d1dc      	bne.n	8004024 <_printf_i+0x30>
 800406a:	2278      	movs	r2, #120	; 0x78
 800406c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004070:	496e      	ldr	r1, [pc, #440]	; (800422c <_printf_i+0x238>)
 8004072:	e064      	b.n	800413e <_printf_i+0x14a>
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800407a:	1d11      	adds	r1, r2, #4
 800407c:	6019      	str	r1, [r3, #0]
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004084:	2301      	movs	r3, #1
 8004086:	e0a3      	b.n	80041d0 <_printf_i+0x1dc>
 8004088:	f011 0f40 	tst.w	r1, #64	; 0x40
 800408c:	f102 0104 	add.w	r1, r2, #4
 8004090:	6019      	str	r1, [r3, #0]
 8004092:	d0d7      	beq.n	8004044 <_printf_i+0x50>
 8004094:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004098:	2b00      	cmp	r3, #0
 800409a:	da03      	bge.n	80040a4 <_printf_i+0xb0>
 800409c:	222d      	movs	r2, #45	; 0x2d
 800409e:	425b      	negs	r3, r3
 80040a0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80040a4:	4962      	ldr	r1, [pc, #392]	; (8004230 <_printf_i+0x23c>)
 80040a6:	220a      	movs	r2, #10
 80040a8:	e017      	b.n	80040da <_printf_i+0xe6>
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80040b2:	d003      	beq.n	80040bc <_printf_i+0xc8>
 80040b4:	1d08      	adds	r0, r1, #4
 80040b6:	6018      	str	r0, [r3, #0]
 80040b8:	680b      	ldr	r3, [r1, #0]
 80040ba:	e006      	b.n	80040ca <_printf_i+0xd6>
 80040bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040c0:	f101 0004 	add.w	r0, r1, #4
 80040c4:	6018      	str	r0, [r3, #0]
 80040c6:	d0f7      	beq.n	80040b8 <_printf_i+0xc4>
 80040c8:	880b      	ldrh	r3, [r1, #0]
 80040ca:	4959      	ldr	r1, [pc, #356]	; (8004230 <_printf_i+0x23c>)
 80040cc:	2a6f      	cmp	r2, #111	; 0x6f
 80040ce:	bf14      	ite	ne
 80040d0:	220a      	movne	r2, #10
 80040d2:	2208      	moveq	r2, #8
 80040d4:	2000      	movs	r0, #0
 80040d6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80040da:	6865      	ldr	r5, [r4, #4]
 80040dc:	60a5      	str	r5, [r4, #8]
 80040de:	2d00      	cmp	r5, #0
 80040e0:	f2c0 809c 	blt.w	800421c <_printf_i+0x228>
 80040e4:	6820      	ldr	r0, [r4, #0]
 80040e6:	f020 0004 	bic.w	r0, r0, #4
 80040ea:	6020      	str	r0, [r4, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d13f      	bne.n	8004170 <_printf_i+0x17c>
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	f040 8095 	bne.w	8004220 <_printf_i+0x22c>
 80040f6:	4675      	mov	r5, lr
 80040f8:	2a08      	cmp	r2, #8
 80040fa:	d10b      	bne.n	8004114 <_printf_i+0x120>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	07da      	lsls	r2, r3, #31
 8004100:	d508      	bpl.n	8004114 <_printf_i+0x120>
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	6862      	ldr	r2, [r4, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	bfde      	ittt	le
 800410a:	2330      	movle	r3, #48	; 0x30
 800410c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004110:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004114:	ebae 0305 	sub.w	r3, lr, r5
 8004118:	6123      	str	r3, [r4, #16]
 800411a:	f8cd 8000 	str.w	r8, [sp]
 800411e:	463b      	mov	r3, r7
 8004120:	aa03      	add	r2, sp, #12
 8004122:	4621      	mov	r1, r4
 8004124:	4630      	mov	r0, r6
 8004126:	f7ff feef 	bl	8003f08 <_printf_common>
 800412a:	3001      	adds	r0, #1
 800412c:	d155      	bne.n	80041da <_printf_i+0x1e6>
 800412e:	f04f 30ff 	mov.w	r0, #4294967295
 8004132:	b005      	add	sp, #20
 8004134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004138:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800413c:	493c      	ldr	r1, [pc, #240]	; (8004230 <_printf_i+0x23c>)
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004146:	f100 0504 	add.w	r5, r0, #4
 800414a:	601d      	str	r5, [r3, #0]
 800414c:	d001      	beq.n	8004152 <_printf_i+0x15e>
 800414e:	6803      	ldr	r3, [r0, #0]
 8004150:	e002      	b.n	8004158 <_printf_i+0x164>
 8004152:	0655      	lsls	r5, r2, #25
 8004154:	d5fb      	bpl.n	800414e <_printf_i+0x15a>
 8004156:	8803      	ldrh	r3, [r0, #0]
 8004158:	07d0      	lsls	r0, r2, #31
 800415a:	bf44      	itt	mi
 800415c:	f042 0220 	orrmi.w	r2, r2, #32
 8004160:	6022      	strmi	r2, [r4, #0]
 8004162:	b91b      	cbnz	r3, 800416c <_printf_i+0x178>
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	f022 0220 	bic.w	r2, r2, #32
 800416a:	6022      	str	r2, [r4, #0]
 800416c:	2210      	movs	r2, #16
 800416e:	e7b1      	b.n	80040d4 <_printf_i+0xe0>
 8004170:	4675      	mov	r5, lr
 8004172:	fbb3 f0f2 	udiv	r0, r3, r2
 8004176:	fb02 3310 	mls	r3, r2, r0, r3
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004180:	4603      	mov	r3, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d1f5      	bne.n	8004172 <_printf_i+0x17e>
 8004186:	e7b7      	b.n	80040f8 <_printf_i+0x104>
 8004188:	6808      	ldr	r0, [r1, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	6949      	ldr	r1, [r1, #20]
 800418e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004192:	d004      	beq.n	800419e <_printf_i+0x1aa>
 8004194:	1d10      	adds	r0, r2, #4
 8004196:	6018      	str	r0, [r3, #0]
 8004198:	6813      	ldr	r3, [r2, #0]
 800419a:	6019      	str	r1, [r3, #0]
 800419c:	e007      	b.n	80041ae <_printf_i+0x1ba>
 800419e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041a2:	f102 0004 	add.w	r0, r2, #4
 80041a6:	6018      	str	r0, [r3, #0]
 80041a8:	6813      	ldr	r3, [r2, #0]
 80041aa:	d0f6      	beq.n	800419a <_printf_i+0x1a6>
 80041ac:	8019      	strh	r1, [r3, #0]
 80041ae:	2300      	movs	r3, #0
 80041b0:	6123      	str	r3, [r4, #16]
 80041b2:	4675      	mov	r5, lr
 80041b4:	e7b1      	b.n	800411a <_printf_i+0x126>
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	1d11      	adds	r1, r2, #4
 80041ba:	6019      	str	r1, [r3, #0]
 80041bc:	6815      	ldr	r5, [r2, #0]
 80041be:	6862      	ldr	r2, [r4, #4]
 80041c0:	2100      	movs	r1, #0
 80041c2:	4628      	mov	r0, r5
 80041c4:	f7fc f804 	bl	80001d0 <memchr>
 80041c8:	b108      	cbz	r0, 80041ce <_printf_i+0x1da>
 80041ca:	1b40      	subs	r0, r0, r5
 80041cc:	6060      	str	r0, [r4, #4]
 80041ce:	6863      	ldr	r3, [r4, #4]
 80041d0:	6123      	str	r3, [r4, #16]
 80041d2:	2300      	movs	r3, #0
 80041d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d8:	e79f      	b.n	800411a <_printf_i+0x126>
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	462a      	mov	r2, r5
 80041de:	4639      	mov	r1, r7
 80041e0:	4630      	mov	r0, r6
 80041e2:	47c0      	blx	r8
 80041e4:	3001      	adds	r0, #1
 80041e6:	d0a2      	beq.n	800412e <_printf_i+0x13a>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	079b      	lsls	r3, r3, #30
 80041ec:	d507      	bpl.n	80041fe <_printf_i+0x20a>
 80041ee:	2500      	movs	r5, #0
 80041f0:	f104 0919 	add.w	r9, r4, #25
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	9a03      	ldr	r2, [sp, #12]
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	429d      	cmp	r5, r3
 80041fc:	db05      	blt.n	800420a <_printf_i+0x216>
 80041fe:	68e0      	ldr	r0, [r4, #12]
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	4298      	cmp	r0, r3
 8004204:	bfb8      	it	lt
 8004206:	4618      	movlt	r0, r3
 8004208:	e793      	b.n	8004132 <_printf_i+0x13e>
 800420a:	2301      	movs	r3, #1
 800420c:	464a      	mov	r2, r9
 800420e:	4639      	mov	r1, r7
 8004210:	4630      	mov	r0, r6
 8004212:	47c0      	blx	r8
 8004214:	3001      	adds	r0, #1
 8004216:	d08a      	beq.n	800412e <_printf_i+0x13a>
 8004218:	3501      	adds	r5, #1
 800421a:	e7eb      	b.n	80041f4 <_printf_i+0x200>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1a7      	bne.n	8004170 <_printf_i+0x17c>
 8004220:	780b      	ldrb	r3, [r1, #0]
 8004222:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004226:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800422a:	e765      	b.n	80040f8 <_printf_i+0x104>
 800422c:	08004494 	.word	0x08004494
 8004230:	08004483 	.word	0x08004483

08004234 <_free_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4605      	mov	r5, r0
 8004238:	2900      	cmp	r1, #0
 800423a:	d045      	beq.n	80042c8 <_free_r+0x94>
 800423c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004240:	1f0c      	subs	r4, r1, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfb8      	it	lt
 8004246:	18e4      	addlt	r4, r4, r3
 8004248:	f000 f8d6 	bl	80043f8 <__malloc_lock>
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <_free_r+0x98>)
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	4610      	mov	r0, r2
 8004252:	b933      	cbnz	r3, 8004262 <_free_r+0x2e>
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	6014      	str	r4, [r2, #0]
 8004258:	4628      	mov	r0, r5
 800425a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800425e:	f000 b8cc 	b.w	80043fa <__malloc_unlock>
 8004262:	42a3      	cmp	r3, r4
 8004264:	d90c      	bls.n	8004280 <_free_r+0x4c>
 8004266:	6821      	ldr	r1, [r4, #0]
 8004268:	1862      	adds	r2, r4, r1
 800426a:	4293      	cmp	r3, r2
 800426c:	bf04      	itt	eq
 800426e:	681a      	ldreq	r2, [r3, #0]
 8004270:	685b      	ldreq	r3, [r3, #4]
 8004272:	6063      	str	r3, [r4, #4]
 8004274:	bf04      	itt	eq
 8004276:	1852      	addeq	r2, r2, r1
 8004278:	6022      	streq	r2, [r4, #0]
 800427a:	6004      	str	r4, [r0, #0]
 800427c:	e7ec      	b.n	8004258 <_free_r+0x24>
 800427e:	4613      	mov	r3, r2
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	b10a      	cbz	r2, 8004288 <_free_r+0x54>
 8004284:	42a2      	cmp	r2, r4
 8004286:	d9fa      	bls.n	800427e <_free_r+0x4a>
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	1858      	adds	r0, r3, r1
 800428c:	42a0      	cmp	r0, r4
 800428e:	d10b      	bne.n	80042a8 <_free_r+0x74>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	4401      	add	r1, r0
 8004294:	1858      	adds	r0, r3, r1
 8004296:	4282      	cmp	r2, r0
 8004298:	6019      	str	r1, [r3, #0]
 800429a:	d1dd      	bne.n	8004258 <_free_r+0x24>
 800429c:	6810      	ldr	r0, [r2, #0]
 800429e:	6852      	ldr	r2, [r2, #4]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	4401      	add	r1, r0
 80042a4:	6019      	str	r1, [r3, #0]
 80042a6:	e7d7      	b.n	8004258 <_free_r+0x24>
 80042a8:	d902      	bls.n	80042b0 <_free_r+0x7c>
 80042aa:	230c      	movs	r3, #12
 80042ac:	602b      	str	r3, [r5, #0]
 80042ae:	e7d3      	b.n	8004258 <_free_r+0x24>
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	1821      	adds	r1, r4, r0
 80042b4:	428a      	cmp	r2, r1
 80042b6:	bf04      	itt	eq
 80042b8:	6811      	ldreq	r1, [r2, #0]
 80042ba:	6852      	ldreq	r2, [r2, #4]
 80042bc:	6062      	str	r2, [r4, #4]
 80042be:	bf04      	itt	eq
 80042c0:	1809      	addeq	r1, r1, r0
 80042c2:	6021      	streq	r1, [r4, #0]
 80042c4:	605c      	str	r4, [r3, #4]
 80042c6:	e7c7      	b.n	8004258 <_free_r+0x24>
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
 80042ca:	bf00      	nop
 80042cc:	20014ccc 	.word	0x20014ccc

080042d0 <_malloc_r>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	1ccd      	adds	r5, r1, #3
 80042d4:	f025 0503 	bic.w	r5, r5, #3
 80042d8:	3508      	adds	r5, #8
 80042da:	2d0c      	cmp	r5, #12
 80042dc:	bf38      	it	cc
 80042de:	250c      	movcc	r5, #12
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	4606      	mov	r6, r0
 80042e4:	db01      	blt.n	80042ea <_malloc_r+0x1a>
 80042e6:	42a9      	cmp	r1, r5
 80042e8:	d903      	bls.n	80042f2 <_malloc_r+0x22>
 80042ea:	230c      	movs	r3, #12
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	2000      	movs	r0, #0
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
 80042f2:	f000 f881 	bl	80043f8 <__malloc_lock>
 80042f6:	4a23      	ldr	r2, [pc, #140]	; (8004384 <_malloc_r+0xb4>)
 80042f8:	6814      	ldr	r4, [r2, #0]
 80042fa:	4621      	mov	r1, r4
 80042fc:	b991      	cbnz	r1, 8004324 <_malloc_r+0x54>
 80042fe:	4c22      	ldr	r4, [pc, #136]	; (8004388 <_malloc_r+0xb8>)
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	b91b      	cbnz	r3, 800430c <_malloc_r+0x3c>
 8004304:	4630      	mov	r0, r6
 8004306:	f000 f867 	bl	80043d8 <_sbrk_r>
 800430a:	6020      	str	r0, [r4, #0]
 800430c:	4629      	mov	r1, r5
 800430e:	4630      	mov	r0, r6
 8004310:	f000 f862 	bl	80043d8 <_sbrk_r>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	d126      	bne.n	8004366 <_malloc_r+0x96>
 8004318:	230c      	movs	r3, #12
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	4630      	mov	r0, r6
 800431e:	f000 f86c 	bl	80043fa <__malloc_unlock>
 8004322:	e7e4      	b.n	80042ee <_malloc_r+0x1e>
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	1b5b      	subs	r3, r3, r5
 8004328:	d41a      	bmi.n	8004360 <_malloc_r+0x90>
 800432a:	2b0b      	cmp	r3, #11
 800432c:	d90f      	bls.n	800434e <_malloc_r+0x7e>
 800432e:	600b      	str	r3, [r1, #0]
 8004330:	50cd      	str	r5, [r1, r3]
 8004332:	18cc      	adds	r4, r1, r3
 8004334:	4630      	mov	r0, r6
 8004336:	f000 f860 	bl	80043fa <__malloc_unlock>
 800433a:	f104 000b 	add.w	r0, r4, #11
 800433e:	1d23      	adds	r3, r4, #4
 8004340:	f020 0007 	bic.w	r0, r0, #7
 8004344:	1ac3      	subs	r3, r0, r3
 8004346:	d01b      	beq.n	8004380 <_malloc_r+0xb0>
 8004348:	425a      	negs	r2, r3
 800434a:	50e2      	str	r2, [r4, r3]
 800434c:	bd70      	pop	{r4, r5, r6, pc}
 800434e:	428c      	cmp	r4, r1
 8004350:	bf0d      	iteet	eq
 8004352:	6863      	ldreq	r3, [r4, #4]
 8004354:	684b      	ldrne	r3, [r1, #4]
 8004356:	6063      	strne	r3, [r4, #4]
 8004358:	6013      	streq	r3, [r2, #0]
 800435a:	bf18      	it	ne
 800435c:	460c      	movne	r4, r1
 800435e:	e7e9      	b.n	8004334 <_malloc_r+0x64>
 8004360:	460c      	mov	r4, r1
 8004362:	6849      	ldr	r1, [r1, #4]
 8004364:	e7ca      	b.n	80042fc <_malloc_r+0x2c>
 8004366:	1cc4      	adds	r4, r0, #3
 8004368:	f024 0403 	bic.w	r4, r4, #3
 800436c:	42a0      	cmp	r0, r4
 800436e:	d005      	beq.n	800437c <_malloc_r+0xac>
 8004370:	1a21      	subs	r1, r4, r0
 8004372:	4630      	mov	r0, r6
 8004374:	f000 f830 	bl	80043d8 <_sbrk_r>
 8004378:	3001      	adds	r0, #1
 800437a:	d0cd      	beq.n	8004318 <_malloc_r+0x48>
 800437c:	6025      	str	r5, [r4, #0]
 800437e:	e7d9      	b.n	8004334 <_malloc_r+0x64>
 8004380:	bd70      	pop	{r4, r5, r6, pc}
 8004382:	bf00      	nop
 8004384:	20014ccc 	.word	0x20014ccc
 8004388:	20014cd0 	.word	0x20014cd0

0800438c <_realloc_r>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	4607      	mov	r7, r0
 8004390:	4614      	mov	r4, r2
 8004392:	460e      	mov	r6, r1
 8004394:	b921      	cbnz	r1, 80043a0 <_realloc_r+0x14>
 8004396:	4611      	mov	r1, r2
 8004398:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800439c:	f7ff bf98 	b.w	80042d0 <_malloc_r>
 80043a0:	b922      	cbnz	r2, 80043ac <_realloc_r+0x20>
 80043a2:	f7ff ff47 	bl	8004234 <_free_r>
 80043a6:	4625      	mov	r5, r4
 80043a8:	4628      	mov	r0, r5
 80043aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ac:	f000 f826 	bl	80043fc <_malloc_usable_size_r>
 80043b0:	4284      	cmp	r4, r0
 80043b2:	d90f      	bls.n	80043d4 <_realloc_r+0x48>
 80043b4:	4621      	mov	r1, r4
 80043b6:	4638      	mov	r0, r7
 80043b8:	f7ff ff8a 	bl	80042d0 <_malloc_r>
 80043bc:	4605      	mov	r5, r0
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0f2      	beq.n	80043a8 <_realloc_r+0x1c>
 80043c2:	4631      	mov	r1, r6
 80043c4:	4622      	mov	r2, r4
 80043c6:	f7ff fbfd 	bl	8003bc4 <memcpy>
 80043ca:	4631      	mov	r1, r6
 80043cc:	4638      	mov	r0, r7
 80043ce:	f7ff ff31 	bl	8004234 <_free_r>
 80043d2:	e7e9      	b.n	80043a8 <_realloc_r+0x1c>
 80043d4:	4635      	mov	r5, r6
 80043d6:	e7e7      	b.n	80043a8 <_realloc_r+0x1c>

080043d8 <_sbrk_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4c06      	ldr	r4, [pc, #24]	; (80043f4 <_sbrk_r+0x1c>)
 80043dc:	2300      	movs	r3, #0
 80043de:	4605      	mov	r5, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	6023      	str	r3, [r4, #0]
 80043e4:	f000 f814 	bl	8004410 <_sbrk>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_sbrk_r+0x1a>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_sbrk_r+0x1a>
 80043f0:	602b      	str	r3, [r5, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	2001e064 	.word	0x2001e064

080043f8 <__malloc_lock>:
 80043f8:	4770      	bx	lr

080043fa <__malloc_unlock>:
 80043fa:	4770      	bx	lr

080043fc <_malloc_usable_size_r>:
 80043fc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004400:	2800      	cmp	r0, #0
 8004402:	f1a0 0004 	sub.w	r0, r0, #4
 8004406:	bfbc      	itt	lt
 8004408:	580b      	ldrlt	r3, [r1, r0]
 800440a:	18c0      	addlt	r0, r0, r3
 800440c:	4770      	bx	lr
	...

08004410 <_sbrk>:
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <_sbrk+0x14>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	4602      	mov	r2, r0
 8004416:	b909      	cbnz	r1, 800441c <_sbrk+0xc>
 8004418:	4903      	ldr	r1, [pc, #12]	; (8004428 <_sbrk+0x18>)
 800441a:	6019      	str	r1, [r3, #0]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	4402      	add	r2, r0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	4770      	bx	lr
 8004424:	20014cd4 	.word	0x20014cd4
 8004428:	2001e068 	.word	0x2001e068

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
